<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rest on SystemOut</title>
    <link>http://localhost:1313/tags/rest/</link>
    <description>Recent content in Rest on SystemOut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>nmj@systemout.net (Nicklas Møller Jepsen)</managingEditor>
    <webMaster>nmj@systemout.net (Nicklas Møller Jepsen)</webMaster>
    <lastBuildDate>Wed, 18 Dec 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/rest/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating a REST (and SOAP) Enabled WCF Service</title>
      <link>http://localhost:1313/2013/12/18/creating-a-rest-and-soap-enabled-wcf-service/</link>
      <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://localhost:1313/2013/12/18/creating-a-rest-and-soap-enabled-wcf-service/</guid>
      <description>&lt;p&gt;In this post I&amp;#8217;m going to walk you through the process of creating a REST/SOAP enabled WCF service using .NET 4.5.1 and Visual Studio 2013.&lt;/p&gt;

&lt;p&gt;If you just want to try for yourself you can download the complete solution &lt;a href=&#34;http://sdrv.ms/1fntPAZ&#34; title=&#34;Donwload from my SKyDrive&#34; target=&#34;_blank&#34;&gt;here!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select New Project &amp;gt; Templates &amp;gt; C# &amp;gt; WCF &amp;gt; WCF Service Application: &lt;a href=&#34;http://www.systemout.net/wp-content/uploads/2013/12/CreateWcfServiceProject.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-214&#34; alt=&#34;CreateWcfServiceProject&#34; src=&#34;http://www.systemout.net/wp-content/uploads/2013/12/CreateWcfServiceProject.png&#34; width=&#34;955&#34; height=&#34;660&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will create a project containing only the basics – the interface, implementation and a .config file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you’re wondering about the name Trusic then I can tell you that it is the name of a service I’m writing for use in an in-depth guide to object oriented thinking and programming using the newest .NET technologies.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can try the service generated by the template out by marking the Service1.svc file in solution explorer and hit F5 to debug the service. (By marking Service1.svc Visual Studio is starting the WCF Test Client for you).&lt;/p&gt;

&lt;p&gt;Now select the GetData operation and enter a value and hit Invoke:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.systemout.net/wp-content/uploads/2013/12/WcfTestClientInvoke.png&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-215&#34; alt=&#34;WCF Test Client&#34; src=&#34;http://www.systemout.net/wp-content/uploads/2013/12/WcfTestClientInvoke.png&#34; width=&#34;808&#34; height=&#34;512&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This invokes the default SOAP endpoint which is fine, but SOAP is a bit old-school and we are of course going to be publishing our service through a RESTful JSON endpoint also. This requires minimal code changes and only a bit changes to the web.config file.&lt;/p&gt;

&lt;p&gt;In you service’s SVC file add the following annotation to the GetData method: [WebGet] it should look like so:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;[WebGet]
        public string GetData(int value)
        {
            return string.Format(&#34;You entered: {0}&#34;, value);
        }
&lt;/pre&gt;

&lt;p&gt;In the Web.config insert the following after :&lt;/p&gt;

&lt;pre class=&#34;brush: xml; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;services&amp;gt;
      &amp;lt;service name=&#34;WcfService1.Service1&#34;&amp;gt;
        &amp;lt;endpoint address=&#34;soap&#34; binding=&#34;basicHttpBinding&#34;  behaviorConfiguration=&#34;soapBehavior&#34; contract=&#34;WcfService1.IService1&#34;/&amp;gt;
        &amp;lt;endpoint address=&#34;json&#34; binding=&#34;webHttpBinding&#34;  behaviorConfiguration=&#34;jsonBehavior&#34; contract=&#34;WcfService1.IService1&#34;/&amp;gt;
      &amp;lt;/service&amp;gt;
    &amp;lt;/services&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Make sure that the service name is set to the name of your service SVC file and that the contract is set to the name of your interface.&lt;/p&gt;

&lt;p&gt;In the element add:&lt;/p&gt;

&lt;pre class=&#34;brush: xml; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;endpointBehaviors&amp;gt;
        &amp;lt;behavior name=&#34;soapBehavior&#34;&amp;gt;
        &amp;lt;/behavior&amp;gt;
        &amp;lt;behavior name=&#34;jsonBehavior&#34;&amp;gt;
          &amp;lt;enableWebScript/&amp;gt;
        &amp;lt;/behavior&amp;gt;
      &amp;lt;/endpointBehaviors&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Now hit F5 and open your browser, navigate to: &lt;a href=&#34;http://localhost:/.svc/json/GetData?value=10&#34;&gt;http://localhost:/.svc/json/GetData?value=10&lt;/a&gt; and look for the magic to happen:&lt;/p&gt;

&lt;div id=&#34;attachment_216&#34; style=&#34;width: 807px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://www.systemout.net/wp-content/uploads/2013/12/ChromeInvokeRestService.png&#34;&gt;&lt;img class=&#34;size-full wp-image-216&#34; alt=&#34;REST service call in Chrome&#34; src=&#34;http://www.systemout.net/wp-content/uploads/2013/12/ChromeInvokeRestService.png&#34; width=&#34;797&#34; height=&#34;355&#34; /&gt;&lt;/a&gt;&lt;p class=&#34;wp-caption-text&#34;&gt;
    REST service call in Chrome
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;If that isn’t good enough we still have our SOAP endpoint available. For instance in soapUI try to invoke your service by adding a new endpoint:&lt;br /&gt;
&lt;a href=&#34;http://www.systemout.net/wp-content/uploads/2013/12/CreateSoapUiProject.png&#34;&gt;&lt;img src=&#34;http://www.systemout.net/wp-content/uploads/2013/12/CreateSoapUiProject.png&#34; alt=&#34;Create a soapUi project&#34; width=&#34;546&#34; height=&#34;359&#34; class=&#34;aligncenter size-full wp-image-230&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now soapUI has generated a proxy client you can use to invoke the SOAP endpoint of the service:&lt;br /&gt;
&lt;a href=&#34;http://www.systemout.net/wp-content/uploads/2013/12/InvokeSoapEndpointSoapUi.png&#34;&gt;&lt;img src=&#34;http://www.systemout.net/wp-content/uploads/2013/12/InvokeSoapEndpointSoapUi.png&#34; alt=&#34;Invoke the operation through the SOAP endpoint&#34; width=&#34;1104&#34; height=&#34;750&#34; class=&#34;aligncenter size-full wp-image-231&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beautiful! :)&lt;/p&gt;

&lt;p&gt;Remember; you can download the solution &lt;a href=&#34;http://sdrv.ms/1fntPAZ&#34; title=&#34;Donwload from my SKyDrive&#34; target=&#34;_blank&#34;&gt;here!&lt;/a&gt;&lt;/p&gt;

&lt;div style=&#34;font-size:0px;height:0px;line-height:0px;margin:0;padding:0;clear:both&#34;&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>&#39;Windows Azure Access Control Service (ACS) &amp;#8211; part 1 &amp;#8216;Get token in WP7 client&amp;#8217;&#39;</title>
      <link>http://localhost:1313/2012/02/09/windows-azure-access-control-service-acs-part-1-get-token-in-wp7-client/</link>
      <pubDate>Thu, 09 Feb 2012 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://localhost:1313/2012/02/09/windows-azure-access-control-service-acs-part-1-get-token-in-wp7-client/</guid>
      <description>&lt;p&gt;While working on a project for WP7 where a backend is required I needed to implement some sort of security on the server. As the server is being hosted in Windows Azure I looked into ACS. At first it did look a bid &amp;#8220;over configured&amp;#8221; meaning there is a lot of documentation on how to use it and what you can actually do with it. Facebook, Google, Windows Live login etc. For my purpose I just needed a simple way off securing my REST service and after some reading I thought I would give ACS a try.&lt;/p&gt;

&lt;p&gt;Steps involved:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a REST ACS enabled WCF service (will post about this subject later)&lt;/li&gt;
&lt;li&gt;Configure ACS (Windows Azure Portal)&lt;/li&gt;
&lt;li&gt;Request token on client (this post ;))&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  This first post about ACS is about the last step in the above list. The reason for not starting from the top is that I couldn&amp;#8217;t seem to find any decent guides on how to implement a &lt;span style=&#34;text-decoration: underline;&#34;&gt;simple&lt;/span&gt; ACS client/consumer on Windows Phone. Therefore the bottom up concept :)
&lt;/div&gt;

&lt;p&gt;To actually configure ACS to Issue a SWT Token to be using I followed &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/hh289317.aspx&#34; target=&#34;_blank&#34;&gt;this well explained MSDN article&lt;/a&gt; - scroll to the 2. part &amp;#8216;Step 2 – Configure ACS to Issue a SWT Token&amp;#8217;&lt;/p&gt;

&lt;p&gt;Btw. in the examples below I&amp;#8217;m using &lt;a href=&#34;http://restsharp.org/&#34; target=&#34;_blank&#34;&gt;RestSharp&lt;/a&gt; a very simple to use REST library for both WP7/SL, WinForms, etc.&lt;/p&gt;

&lt;p&gt;And now back to the topic &amp;#8211; WP7 ACS token consumer:&lt;/p&gt;

&lt;p&gt;The basic concept of authorizing against a WCF ACS secured service is that you send an &amp;#8220;Authorization&amp;#8221; header in the request:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;request.AddHeader(&#34;Authorization&#34;, token.TokenString);&lt;/pre&gt;

&lt;p&gt;But of course you need to now the token to put in the header.&lt;/p&gt;

&lt;p&gt;To make sure we have the token, the following is executed before the actual REST call:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;RestClient client = new RestClient(
string.Format(&#34;https://{0}.{1}&#34;, serviceNamespace, accesscontrol.windows.net));
RestRequest treq = new RestRequest(&#34;/WRAPv0.9&#34;);
treq.Method = Method.POST;
treq.AddParameter(&#34;wrap_name&#34;, uid);
treq.AddParameter(&#34;wrap_password&#34;, pwd);
treq.AddParameter(&#34;wrap_scope&#34;, realm);
client.ExecuteAsync(treq, (re) =&amp;amp;gt;
{
// Get expiration
string expiry = result
.Split(&#39;&amp;amp;amp;&#39;)
.Single(value =&amp;amp;gt; value.StartsWith(&#34;wrap_access_token_expires_in&#34;, StringComparison.OrdinalIgnoreCase)).
Split(&#39;=&#39;)[1];

// Get Access Token
result = HttpUtility.UrlDecode(
result
.Split(&#39;&amp;amp;amp;&#39;)
.Single(value =&amp;amp;gt; value.StartsWith(&#34;wrap_access_token=&#34;, StringComparison.OrdinalIgnoreCase))
.Split(&#39;=&#39;)[1]);

token = new AcsToken()
{
ExpirationDate = DateTime.Now.AddSeconds(Int32.Parse(expiry)),
TokenString = string.Format(&#34;WRAP access_token=&#34;{0}&#34;&#34;, result),
};
});
&lt;/pre&gt;

&lt;p&gt;Now the token is stored in a local variable &amp;#8216;token&amp;#8217; where it is possible to check if it is expired and to get the token string which the can be used to put in the header of coming requests against the ACS secured WCF REST service.&lt;/p&gt;

&lt;p&gt;And just for as a ending note; here&amp;#8217;s the Token type:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;class AcsToken
{
public string TokenString { get; set; }
public DateTime ExpirationDate { get; set; }

public bool IsExpired
{
get
{
return DateTime.Now &amp;amp;gt; ExpirationDate;
}
}
}
&lt;/pre&gt;

&lt;p&gt;That&amp;#8217;s it for this part of the ACS post series. More will follow :)&lt;/p&gt;

&lt;div style=&#34;font-size:0px;height:0px;line-height:0px;margin:0;padding:0;clear:both&#34;&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>