<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SystemOut</title>
    <link>http://systemout.net/</link>
    <description>Recent content on SystemOut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>nmj@systemout.net (Nicklas Møller Jepsen)</managingEditor>
    <webMaster>nmj@systemout.net (Nicklas Møller Jepsen)</webMaster>
    <lastBuildDate>Thu, 01 Oct 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://systemout.net/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Async RSS Parser Service</title>
      <link>http://systemout.net/2015/10/01/async-rss-parser-service/</link>
      <pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2015/10/01/async-rss-parser-service/</guid>
      <description>

&lt;h2 id=&#34;introduction:cd8934bb510e397ca8b305f3943838bf&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post is about how you can implement a generic RSS parser that runs as a service, meaning that it keeps parsing the given URLs in a loop. The reason behind this is that I wanted to be able to data mine some of the daily news from the press and therefore I needed to store the articles in my own database.&lt;/p&gt;

&lt;p&gt;The result is a Nuget package that can be included in a .NET project:
&lt;code&gt;Install-Package SystemOut.RssParser&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you just want to check out the source for the project, then go to &lt;a href=&#34;https://github.com/nicklasjepsen/SystemOut.RssService&#34;&gt;Github where I host the repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to know how I implemented the code, then please read on!&lt;/p&gt;

&lt;h2 id=&#34;rss-parser-implementation:cd8934bb510e397ca8b305f3943838bf&#34;&gt;RSS Parser Implementation&lt;/h2&gt;

&lt;p&gt;The project consists of several classes; several RSS model base classes that represents the XML model of a RSS feed.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s have a look at some typical RSS XML&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;rss&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;version=&amp;quot;2.0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;channel&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;link&amp;gt;&amp;lt;/link&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;description&amp;gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;language&amp;gt;&amp;lt;/language&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;item&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;link&amp;gt;&amp;lt;/link&amp;gt;&lt;/span&gt;
			&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;description&amp;gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
  			&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;pubDate&amp;gt;&amp;lt;/pubDate&amp;gt;&lt;/span&gt;
  			&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;comments&amp;gt;&amp;lt;/comments&amp;gt;&lt;/span&gt;
  			&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;guid&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;isPermaLink=&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/guid&amp;gt;&lt;/span&gt;
  			&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;enclosure&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;url=&amp;quot;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;image/jpeg&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;length=&amp;quot;3930&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/channel&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/rss&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To be able to deserialize this feed we have some classes: BaseRssFeed.cs, BaseRssChannel.cs and BaseRssItem.cs. Those classes are just plain old C# classes with properties - not that intereseting - you can find them &lt;a href=&#34;https://github.com/nicklasjepsen/SystemOut.RssService&#34;&gt;on Github&lt;/a&gt; if you want to.&lt;/p&gt;

&lt;p&gt;The RssDeserializer.cs is more interesting - here is the GetFeed method:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; T GetFeed&amp;lt;T&amp;gt;(&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; feedUrl)
{
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;.IsNullOrEmpty(feedUrl)) &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;default&lt;/span&gt;(T);
	
	&lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; xs = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; XmlSerializer(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;typeof&lt;/span&gt;(T));
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;try&lt;/span&gt;
	{
		&lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; xmlReaderSettings = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; XmlReaderSettings
		{
			DtdProcessing = DtdProcessing.Parse
		};
		T rss;
		&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; reader = XmlReader.Create(feedUrl, xmlReaderSettings))
		{
			rss = (T)xs.Deserialize(reader);
		}
		&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; rss;
	}
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;catch&lt;/span&gt; (WebException webException)
	{
		Logger.Log(LogLevel.Error, webException);
		&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;default&lt;/span&gt;(T);
	}
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;catch&lt;/span&gt; (InvalidOperationException invalidOperationException)
	{
		Logger.Log(LogLevel.Error, invalidOperationException);
		&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;default&lt;/span&gt;(T);
	}
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;As you can see, we are using the XmlSerializer and XmlReader to read and deserialize the RSS feed. Not much magic, because we get most by using the built in implementations of .NET.&lt;/p&gt;

&lt;p&gt;Now to be able to be able to use the deserializer generically we have a wrapper around the RssDeserializer:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;async&lt;/span&gt; Task&amp;lt;List&amp;lt;FeedItem&amp;gt;&amp;gt; Parse(FeedSource source)
{
    &lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; feed = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;await&lt;/span&gt; Task.Run(() =&amp;gt; RssDeserializer.GetFeed(source.Url));
    &lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; channel = feed?.GetRssChannels()?.FirstOrDefault();
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (channel == &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;null&lt;/span&gt;)
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; List&amp;lt;FeedItem&amp;gt;();
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; (&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;from&lt;/span&gt; rssItem &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; channel.GetRssItems()
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; FeedItem
            {
                Title = rssItem.Title,
                Url = rssItem.Link,
                ExternalItemId = rssItem.GetGuid(),
                ImportTime = DateTime.UtcNow,
                PublishTime = rssItem.Date,
                FeedSource = source,
                Summary = rssItem.Description,
            }).ToList();
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This method calls the deserializers parse method and transforms the objects into the desired feed items.&lt;/p&gt;

&lt;p&gt;Now to the most intereseting part - the RSS Parsing Service.
The class &lt;strong&gt;NewsFeedParseService.cs&lt;/strong&gt; is designed with custom events that will be triggered once a new RSS feed item is imported. This is done so that the caller can determine what to do with the new item. First I had an Entity Framework context in the NewsFeedParserService but when I wanted to publish the solution as a Nuget package I needed to extract the database logic from the parsing. Therefore I decided to create an event based service that notifies the caller when a new item is imported. This moves the responsibility of data persistance away from the parser and out where it belongs.
For the above reason we have the following event i the NewsFeedParseService.cs:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;NewFeedItemHandler&lt;/span&gt;(&lt;span style=&#34;color: #902000&#34;&gt;object&lt;/span&gt; sender, FeedItemEventArgs e);
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;event&lt;/span&gt; NewFeedItemHandler OnNewFeedItems;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This event is triggered in the Execute method that async runs until cancelled:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;async&lt;/span&gt; Task &lt;span style=&#34;color: #06287e&#34;&gt;Execute&lt;/span&gt;(CancellationToken cancellationToken)
{
	&lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; feedItemsCache = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; HashSet&amp;lt;&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;&amp;gt;();
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;do&lt;/span&gt;
	{
		&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; feedSource &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; feedSources)
		{
			Logger.Debug(&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Reading feed from {feedSource.Url}.&amp;quot;&lt;/span&gt;);
			&lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; newItems = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; List&amp;lt;FeedItem&amp;gt;();
			&lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; items = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;await&lt;/span&gt; defaultParser.Parse(feedSource);
			&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (items == &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;null&lt;/span&gt;)
				&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;continue&lt;/span&gt;;
		
			&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; feedItem &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; items)
			{
				&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (feedItemsCache.Contains(feedItem.ExternalItemId))
					&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;continue&lt;/span&gt;;
				feedItemsCache.Add(feedItem.ExternalItemId);
				newItems.Add(feedItem);
			}
		
			Logger.Debug(&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Got {newItems.Count} new items.&amp;quot;&lt;/span&gt;);
		
			&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (newItems.Count &amp;gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;)
				OnNewFeedItems?.Invoke(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; FeedItemEventArgs { Items = newItems });
		
		}
		
		Logger.Info(&lt;span style=&#34;border: 1px solid #FF0000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Sleeping {ConfigurationProvider.GetIntValue(ConfigurationProvider.FeedImportIntervalInSeconds, 60)} second(s) before starting all over.&amp;quot;&lt;/span&gt;);
		&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;await&lt;/span&gt; Task.Delay(ConfigurationProvider.GetIntValue(ConfigurationProvider.FeedImportIntervalInSeconds, &lt;span style=&#34;color: #40a070&#34;&gt;60&lt;/span&gt;) * &lt;span style=&#34;color: #40a070&#34;&gt;1000&lt;/span&gt;, cancellationToken);
	} &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;while&lt;/span&gt; (!cancellationToken.IsCancellationRequested);

	Logger.Info(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Task is cancelled - escaping endless loop.&amp;quot;&lt;/span&gt;);  
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;What happens here is that we are creating a HashSet using this a a cache for already imported feeditems. Because RSS parsing is poll based we need to import the manually and prevent the clients from getting multiple events for the same items.
Further more we are calling the parse operation and then iterating all the results and if they do not exist in the cache, we trigger a new event, notifying the caller that a new item is imported.
This goes on in a loop that only gets escaped if the caller decides to cancel the execution.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s pretty much it! Next post will be about how to use SignalR to push the new post to clients so we can create a web site that dynamically updates when a new post is added.&lt;/p&gt;

&lt;p&gt;Remember to check out the &lt;a href=&#34;https://www.nuget.org/packages/SystemOut.RssParser/&#34;&gt;Nuget site for the project&lt;/a&gt; or simply install it directly in you projects:
&lt;code&gt;Install-Package SystemOut.RssParser&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Also check out &lt;a href=&#34;https://github.com/nicklasjepsen/SystemOut.RssService&#34;&gt;the Github repo&lt;/a&gt;!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Windows 10 - How to configure network adapter - properties not working</title>
      <link>http://systemout.net/2015/08/12/windows-10-how-to-configure-network-adapter-properties-not-working/</link>
      <pubDate>Wed, 12 Aug 2015 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2015/08/12/windows-10-how-to-configure-network-adapter-properties-not-working/</guid>
      <description>

&lt;p&gt;So I have installed Windows 10 RTM on my main PC and overall I&amp;rsquo;m happy with it. Although it still seems a little bit &amp;ldquo;beta&amp;rdquo; I am satisfied.
One problem I have encountered is that when setting up a VPN to be able to access company resources I am no longer able to access the Advanced Properties of the VPN Network Adapter:
&lt;img src=&#34;http://systemout.net/images/VPNProperties.png&#34; alt=&#34;VPN Properties&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Whenever I click on the Properties button for Internet Protocol Version 4 (TCP/IPv4) nothing happens!
This is really annoying me, because I need to be connected to the VPN so that I can access all the internal resources on my workplace, but I don want to use their gateway to route all my traffic hence I need to be able to configure the TCP/IP properties.&lt;/p&gt;

&lt;p&gt;The issue is reported &lt;a href=&#34;http://answers.microsoft.com/en-us/insider/forum/insider_wintp-insider_web/network-connection-vpn-ipv4-properties-not-working/a60edf99-4b06-4219-bb75-b7c08de4ff9e&#34;&gt;here on Microsoft Answers&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;the-solution:8aa04abc3ef5ae8e91f0727374eefb64&#34;&gt;The Solution&lt;/h3&gt;

&lt;p&gt;As mentioned in the above link, the network connection properties are stored in a plain text file located at &amp;ldquo;C:\Users[YOURUSER]\AppData\Roaming\Microsoft\Network\Connections\Pbk\rasphone.pbk&amp;rdquo;
And the setting for &amp;ldquo;Use default gateway on remote network&amp;rdquo; is called &amp;ldquo;IpPrioritizeRemote&amp;rdquo;.
So changing this to: &lt;code&gt;IpPrioritizeRemote=0&lt;/code&gt; did indeed fix the problem for me.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gravatar C# API</title>
      <link>http://systemout.net/2015/08/08/gravatar-csharp-api/</link>
      <pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2015/08/08/gravatar-csharp-api/</guid>
      <description>&lt;p&gt;Each time I write a new app that involves users (which is pretty often) I think it would be nice to be able to display their own profile image, without the need of authenticating them against facebook, Linkedin or by using their Microsoft account.&lt;/p&gt;

&lt;p&gt;Therefore I decided to use Gravatar, which basically allows you to request a user image (avatar) when you only know their email address. This is pretty simply and you can just make a plain HTTP GET and get their image url in response. Try this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://gravatar.com/avatar/f561d9206d313b49f9bde3bd50803b84&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t want to read any more and just want the Nuget package:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Install-Package GravatarSharp.Core&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, there is now email address in this request, and that is because Gravatar uses a hash of the users email. So you would need some way of generating the hash from the users email and then making the request.
Further more you can retrieve lots of other information about the users presented in JSON format:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://en.gravatar.com/nicklasjepsen.json]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Because I write many applications that could use this, and because I love small APIs/libraries I decided to make a Gravatar C# API and put the code on Github and make the API distributable using Nuget.&lt;/p&gt;

&lt;p&gt;You can find the project here &lt;a href=&#34;https://github.com/nicklasjepsen/GravatarSharp&#34;&gt;on Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And on Nuget: &lt;a href=&#34;https://www.nuget.org/packages/GravatarSharp.Core&#34;&gt;GravatarSharp.Core&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you just need to install the Nuget package for a project, simply open the package manager and enter:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Install-Package GravatarSharp.Core&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>404 Hubs Not Found And Debugging Problems</title>
      <link>http://systemout.net/2014/07/17/404-hubs-not-found-and-debugging-problems/</link>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2014/07/17/404-hubs-not-found-and-debugging-problems/</guid>
      <description>

&lt;h2 id=&#34;introduction:c19d32463fb40573265337c22adbb0e8&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;When working with SignalR I sometimes stumble upon some irritating problems that mostly seems related to Visual Studio and maybe also related to the SignalR framework being relatively new.&lt;/p&gt;

&lt;p&gt;In this post I have assembled some of the errors I have been facing while developing with SignalR.&lt;/p&gt;

&lt;h3 id=&#34;404-hub-s-not-found:c19d32463fb40573265337c22adbb0e8&#34;&gt;404 Hub(s) not found&lt;/h3&gt;

&lt;p&gt;This error seems to have a different solution whether you have deployed your app to IIS or you are debugging.&lt;/p&gt;

&lt;h5 id=&#34;debugging:c19d32463fb40573265337c22adbb0e8&#34;&gt;Debugging&lt;/h5&gt;

&lt;p&gt;I have experienced a lot of difficulties while debugging/running my SignalR apps in Visual Studio 2013. Sometimes, when I reopen a solution that previously “just worked”, it all of the sudden don’t anymore, meaning that the ~/signalr/hubs gives a 404 on localhost or the client can not be found. A fix for this seems to be the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Close Visual Studio&lt;/li&gt;
&lt;li&gt;Make sure IIS Express is shutdown also (look for the IIS Express tray icon)&lt;/li&gt;
&lt;li&gt;Start Visual Studio&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If the above doesn&amp;rsquo;t work, sometimes going out for a cup of coffee and returning does :)&lt;/p&gt;

&lt;h5 id=&#34;deployed-on-iis:c19d32463fb40573265337c22adbb0e8&#34;&gt;Deployed on IIS&lt;/h5&gt;

&lt;p&gt;This is most likely related to the hub reference and how you are hosting the SignalR site on the server. I have written a post about the case, which you can find &lt;a href=&#34;http://systemout.net/2014/07/15/signalr-hub-reference-done-right/&#34;&gt;right here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;troubleshooting:c19d32463fb40573265337c22adbb0e8&#34;&gt;Troubleshooting&lt;/h3&gt;

&lt;p&gt;Remember that you can enable detailed errors when trying to troubleshoot SignalR related problems. Just add this to your OWIN Startup.cs:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; hubConfiguration = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; HubConfiguration
{
	EnableDetailedErrors = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;true&lt;/span&gt;,
};
app.MapSignalR(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;/~/signalr&amp;quot;&lt;/span&gt;, hubConfiguration);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Leave a comment if you have any other problems, and I&amp;rsquo;ll be glad to try and help out!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developing a &#39;Who Is On&#39; Chat Web App Using SignalR and WPF</title>
      <link>http://systemout.net/2015/06/10/developing-a-who-is-on-chat-web-app-using-signalr-and-wpf/</link>
      <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2015/06/10/developing-a-who-is-on-chat-web-app-using-signalr-and-wpf/</guid>
      <description>

&lt;h2 id=&#34;introduction:059a38db281f7dbb8fe36beb42876568&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this tutorial I will guide you in creating a &amp;ldquo;Who Is On&amp;rdquo; client in Windows Presentation Foundation, WPF. The server is an ASP.NET SignalR app. This post is building upon my previous post about how to develop, deploy and host a SignalR Chat Web App. You can find that post &lt;a href=&#34;{% post_url 2014-07-17-developing-and-deploying-a-signalr-chat-web-app-to-iis %}&#34;&gt;right here!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because we are building upon the previous post and solution, you should download the solution &lt;a href=&#34;http://1drv.ms/1wB5IWF&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find the source for the WPF app that we are creating in this post &lt;a href=&#34;http://1drv.ms/1IFqRKj&#34;&gt;rigth here!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are going to add some methods to the server side and make an all new (horrible looking) WPF client - this is a SignalR post, not a &amp;ldquo;make some shiny WPF magic&amp;rdquo; post.&lt;/p&gt;

&lt;h3 id=&#34;the-asp-net-signalr-backend:059a38db281f7dbb8fe36beb42876568&#34;&gt;The ASP.NET SignalR Backend&lt;/h3&gt;

&lt;p&gt;In the MessageHub we are going to need to handle users logging on/off. There fore add to the MessageHub.cs the following ConcurrentDictionaries:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; ConcurrentDictionary&amp;lt;&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;&amp;gt; Usernames = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; ConcurrentDictionary&amp;lt;&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;&amp;gt;();
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; ConcurrentDictionary&amp;lt;&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;&amp;gt; UserList = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; ConcurrentDictionary&amp;lt;&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;&amp;gt;();  
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now modify the Login method in the MessageHub class so that it checks if the username provided is in use, and if not, adds the username to the connected clients list:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;Login&lt;/span&gt;(&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; username)
{
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (Usernames.ContainsKey(username))
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;false&lt;/span&gt;;
    Usernames.TryAdd(username, Context.ConnectionId);
    UserList.TryAdd(Context.ConnectionId, username);

    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Notify all clients that a user is logged in&lt;/span&gt;
    Clients.All.showConnected(UserList);

    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;true&lt;/span&gt;;
}        
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;We need also to be able to remove a user that is logged off/disconnected. This is done in the RemoveUser method:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;RemoveUser&lt;/span&gt;()
{
    &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; username;
    &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; connectionId;
    UserList.TryRemove(Context.ConnectionId, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;out&lt;/span&gt; username);
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;.IsNullOrEmpty(username))
    	Usernames.TryRemove(username, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;out&lt;/span&gt; connectionId);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The RemoveUser method is called from multiple methods of the MessageHub, in a public Logoff method that clients can call:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;Logoff&lt;/span&gt;(&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; username)
{
    RemoveUser();
    Clients.All.showConnected(UserList);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&amp;hellip;and also in some overridden methods that handles SignalR events when users are disconnected:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;override&lt;/span&gt; Task &lt;span style=&#34;color: #06287e&#34;&gt;OnDisconnected&lt;/span&gt;()
{
    RemoveUser();
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; Clients.All.showConnected(UserList);
}

&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/// Needed as of SignalR 2.1.0: http://stackoverflow.com/questions/24878187/signalr-detecting-alive-connection-in-c-sharp-clients&lt;/span&gt;
&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/// &amp;lt;param name=&amp;quot;stopCalled&amp;quot;&amp;gt;&amp;lt;/param&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;/// &amp;lt;returns&amp;gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;override&lt;/span&gt; Task &lt;span style=&#34;color: #06287e&#34;&gt;OnDisconnected&lt;/span&gt;(&lt;span style=&#34;color: #902000&#34;&gt;bool&lt;/span&gt; stopCalled)
{
    RemoveUser();
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; Clients.All.showConnected(UserList);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Finally, we add a GetActiveClients method that is used by the clients to trigger SignalR in sending a list of connected clients. Note that currently the methods takes a &amp;ldquo;requester&amp;rdquo; as parameter - this is for future use, you can ignore it for now. The method is not quite &amp;ldquo;sane&amp;rdquo; ATM because it actually triggers the SignalR event for all connected clients, because we are yet to see how we can send events to specific SignalR clients - look for a near future post about that one :)&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;GetActiveClients&lt;/span&gt;(&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; requster)
{
    Clients.All.showConnected(UserList);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now that was the server side part. Now we continue to the client.&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- ResponsiveHeader --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-5807169669170468&#34;
     data-ad-slot=&#34;5652122954&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;h3 id=&#34;implementing-the-signalr-client-int-wpf:059a38db281f7dbb8fe36beb42876568&#34;&gt;Implementing the SignalR client int WPF&lt;/h3&gt;

&lt;p&gt;Now create a new solution/project and make an WPF app.
We are going to use the Signal .NET client in our WPF project. Open the package manager (I usually uses Ctrl+Q, enter package, select first item in list and Enter). Enter Install-Package Microsoft.AspNet.SignalR.Client and hit enter.
With that done, we can connect our WPF app to the ASP.NET SignalR service hosting our MessageHub. I have assembled all the server communication in a class called ChatService.cs. The class has a couple of public methods like Login, Logoff, StartSignalR, etc. It also holds some events that our UI can subscribe to, so that it can update when for instances receiving a new message or when a user/client is connected/disconnected.&lt;/p&gt;

&lt;p&gt;Here is the ChatService.cs (look below the code for a description of how the code works):&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;System&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;System.Collections.Concurrent&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;System.Collections.Generic&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;System.Linq&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;System.Threading.Tasks&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;Microsoft.AspNet.SignalR.Client&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;WhoIsOn.Client.ViewModels&lt;/span&gt;;
    
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;WhoIsOn.Client&lt;/span&gt;
    {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ChatService&lt;/span&gt;
        {
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; IHubProxy chatHubProxy;
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; currentUsername;
    
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;event&lt;/span&gt; EventHandler&amp;lt;MessageViewModel&amp;gt; OnMessageReceived;
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;event&lt;/span&gt; EventHandler&amp;lt;List&amp;lt;UserViewModel&amp;gt;&amp;gt; OnConnectedUsersChanged;
    
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;async&lt;/span&gt; Task &lt;span style=&#34;color: #06287e&#34;&gt;StartSignalR&lt;/span&gt;()
            {
                &lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; connection = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; HubConnection(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;http://localhost:32986/~/&amp;quot;&lt;/span&gt;);
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;//var connection = new HubConnection(&amp;quot;http://systemout.net:56677/ChatWebApp/~/&amp;quot;);&lt;/span&gt;
    
                chatHubProxy = connection.CreateHubProxy(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;MessageHub&amp;quot;&lt;/span&gt;);
                chatHubProxy.On&amp;lt;&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;displayMessage&amp;quot;&lt;/span&gt;, OnUserMessage);
                chatHubProxy.On&amp;lt;ConcurrentDictionary&amp;lt;&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;&amp;gt;&amp;gt;(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;showConnected&amp;quot;&lt;/span&gt;, ShowConnected);
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;await&lt;/span&gt; connection.Start();
            }
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;ShowConnected&lt;/span&gt;(ConcurrentDictionary&amp;lt;&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;&amp;gt; userList)
            {
                FireOnConnectedUsersChanged(userList.Values.ToList());
            }
    
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;OnUserMessage&lt;/span&gt;(&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; username, &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; message)
            {
                FireOnMessageReceived(username, message);
            }
    
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;FireOnMessageReceived&lt;/span&gt;(&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; username, &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; message)
            {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (OnMessageReceived != &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;null&lt;/span&gt;)
                    OnMessageReceived(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; MessageViewModel { Message = message, Username = username });
            }
    
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;FireOnConnectedUsersChanged&lt;/span&gt;(IEnumerable&amp;lt;&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;&amp;gt; users)
            {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (OnMessageReceived == &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;null&lt;/span&gt;)
                    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt;;
                &lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; usersViewModel = users.Select(user1 =&amp;gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; UserViewModel
                {
                    Username = user1, Status = &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Online&amp;quot;&lt;/span&gt;
                }).ToList();
    
                OnConnectedUsersChanged(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;, usersViewModel);
            }
    
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;async&lt;/span&gt; Task&amp;lt;&lt;span style=&#34;color: #902000&#34;&gt;bool&lt;/span&gt;&amp;gt; LoginAsync(&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; username)
            {
                currentUsername = username;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;await&lt;/span&gt; chatHubProxy.Invoke&amp;lt;&lt;span style=&#34;color: #902000&#34;&gt;bool&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Login&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;object&lt;/span&gt;[] { currentUsername });
            }
    
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;async&lt;/span&gt; Task &lt;span style=&#34;color: #06287e&#34;&gt;RequestConnectedClientList&lt;/span&gt;()
            {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;await&lt;/span&gt; chatHubProxy.Invoke(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;GetActiveClients&amp;quot;&lt;/span&gt;, currentUsername);
            }
    
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;async&lt;/span&gt; Task&amp;lt;&lt;span style=&#34;color: #902000&#34;&gt;bool&lt;/span&gt;&amp;gt; SendMessage(&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; message)
            {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;await&lt;/span&gt; chatHubProxy.Invoke&amp;lt;&lt;span style=&#34;color: #902000&#34;&gt;bool&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;SendMessage&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;object&lt;/span&gt;[] { currentUsername, message });
            }
    
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;async&lt;/span&gt; Task &lt;span style=&#34;color: #06287e&#34;&gt;Logoff&lt;/span&gt;()
            {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;await&lt;/span&gt; chatHubProxy.Invoke(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Logoff&amp;quot;&lt;/span&gt;, currentUsername);
            }
        }
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The events in the ChatService is used so that the WPF Windows can be updated - there should be no trouble here!
Then there is the StartSignalR method. First we are creating a new HubConnection giving the url where the ASP.NET SignalR app is hosted - if you run the sample from the previous post (donwload link in the top of this post) you should be able to connect to SignalR using the localhost address. Other wise, you can use my SignalR service by uncommenting the second HubConnection line in the StartSignalR method.&lt;/p&gt;

&lt;p&gt;Next we create the HubProxy. The string/name must match the name of the class in the ASP.NET SignalR service, in our case that is MessageHub.&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- ResponsiveHeader --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-5807169669170468&#34;
     data-ad-slot=&#34;5652122954&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;Then we create eventlisteners using the chatHubProxy.On methods. Here we must provide the name for the methods that, again, must correspond to dynamically created messages defined in the MessageHub methods in the ASP.NET SignalR app. For instance: Clients.All.showConnected(UserList) - here we use showConnected as an identifier. The signature of the delegate methods that we provide must also match.&lt;/p&gt;

&lt;p&gt;The rest of the class is &amp;ldquo;just&amp;rdquo; implementation of the methods that will be invoked by SignalR and also triggering of the events to update the UI.&lt;/p&gt;

&lt;p&gt;You can download the source for the WPF client &lt;a href=&#34;http://1drv.ms/1IFqRKj&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Please leave any comments/questions you might have!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create a Windows 10 IoT Universal App Photo Viewer with Bing Maps Support</title>
      <link>http://systemout.net/2015/05/28/create-a-windows-10-iot-universal-app-photo-viewer-with-bing-maps-support/</link>
      <pubDate>Thu, 28 May 2015 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2015/05/28/create-a-windows-10-iot-universal-app-photo-viewer-with-bing-maps-support/</guid>
      <description>

&lt;h3 id=&#34;introduction:97c9c115bbf6f31b9c608647d5037e48&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;In this post I will walk your through in creating a photo viewer with Bing Maps integration. The viewer is hosted on a Raspberry Pi 2 running Windows 10 IoT Preview and is created as a C#/XAML Universal Windows Platform (UWP) application.&lt;/p&gt;

&lt;p&gt;UWP is a great way of writing code that reached broad - before UWP we could still create a single solution in Visual Studio, but we would need separate DLLs for each platform target - now we can just create one DLL that can be installed on all Windows platforms. That&amp;rsquo;s great!&lt;/p&gt;

&lt;p&gt;Here is all the steps required to get going:
- Install Windows 10 Preview
- Install Visual Studio 2015 Preview/Beta/RC/whatever state it currently is in :)
- Install Windows 10 IoT Core Preview on the Pi
- Setup Bing Map Developer account and acquire a security token
- Write the code
- Deploy to the Pi
- &amp;hellip;aaand done!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://1drv.ms/1GOcRvK&#34;&gt;Download the solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://systemout.net/images/PiPicSample.png&#34; alt=&#34;Project screen shot&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;installing-windows-and-vs:97c9c115bbf6f31b9c608647d5037e48&#34;&gt;Installing Windows and VS&lt;/h3&gt;

&lt;p&gt;There are plenty of good guides on how to install Windows 10 and also on how to install it on the Pi:
A quick note: &lt;strong&gt;You need a physical PC running Windows 10, unfortunately a VM won&amp;rsquo;t do :(&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here are the links for downloading and installation instructions for all the required software:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://windows.microsoft.com/en-us/windows/preview-faq&#34; target=&#34;_blank&#34;&gt;Install Windows 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ms-iot.github.io/content/en-US/win10/SetupRPI.htm&#34; target=&#34;_blank&#34;&gt;Install Windows 10 IoT Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.visualstudio.com/en-us/downloads/visual-studio-2015-downloads-vs.aspx&#34; target=&#34;_blank&#34;&gt;Visual Studio 2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;setup-bing-maps:97c9c115bbf6f31b9c608647d5037e48&#34;&gt;Setup Bing Maps&lt;/h3&gt;

&lt;p&gt;You need to register your Microsoft account as a Bing Developer which can be done using the Bing Portal right here: &lt;a href=&#34;https://www.bingmapsportal.com&#34; title=&#34;Bing Maps Dev Center&#34;&gt;Bing Maps Dev Center&lt;/a&gt;. Once registered you need to acquire a key/token go to &lt;strong&gt;My Account &amp;gt; Create or view keys&lt;/strong&gt;. Follow the link to create a new key, follow the guide and remember to select Basic / Universal Windows App as the key type.&lt;/p&gt;

&lt;p&gt;Copy the key, you will need to enter it later when creating the application.&lt;/p&gt;

&lt;h3 id=&#34;writing-the-code:97c9c115bbf6f31b9c608647d5037e48&#34;&gt;Writing the code&lt;/h3&gt;

&lt;p&gt;The solution is nice and simple - all we need is a single view and some C# classes.
The consists of a couple of text blocks, an image view and a Map control:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;Grid&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;Background=&amp;quot;Black&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;Grid.Column=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;Image&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;x:Name=&amp;quot;imageControl&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;Margin=&amp;quot;0,0,237,0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;Maps:MapControl&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;x:Name=&amp;quot;MapControl&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;MapServiceToken=&amp;quot;TOKEN&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;Height=&amp;quot;202&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;VerticalAlignment=&amp;quot;Bottom&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;Margin=&amp;quot;0,0,24,25&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;HorizontalAlignment=&amp;quot;Right&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;Width=&amp;quot;213&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;x:Name=&amp;quot;DetailsTxb&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;Margin=&amp;quot;0,10,-9,0&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;TextWrapping=&amp;quot;Wrap&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;Text=&amp;quot;TextBlock&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;Foreground=&amp;quot;White&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;Height=&amp;quot;20&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;VerticalAlignment=&amp;quot;Top&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;FontWeight=&amp;quot;Bold&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;FontSize=&amp;quot;16&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;HorizontalAlignment=&amp;quot;Right&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;Width=&amp;quot;241&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;x:Name=&amp;quot;MoreDetailsTxb&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;Margin=&amp;quot;0,35,10,0&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;TextWrapping=&amp;quot;Wrap&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;Text=&amp;quot;TextBlock&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;Foreground=&amp;quot;#FFB8B8B8&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;Height=&amp;quot;20&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;VerticalAlignment=&amp;quot;Top&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;HorizontalAlignment=&amp;quot;Right&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;Width=&amp;quot;222&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Then we need some magic to read the photos from disk, read properties from each photo file like latitude and longitude, translate the coordinates using the Bing Maps service, update the text blocks with the data and finally show the image and set the location of the Map control. All this is implemented in C# in the code behind file.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how to get the image files:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;KnownFolders.PicturesLibrary.GetFolderAsync(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;PiPic&amp;quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;This will look in the current users Pictures library for a folder named PiPic. Note that in the UWP there are no File library or other of that stuff we are used to from .NET - this is because that UWP will work on a phone also where we not necessarily have a C: drive.&lt;/p&gt;

&lt;h5 id=&#34;reading-the-image-properties:97c9c115bbf6f31b9c608647d5037e48&#34;&gt;Reading the image properties&lt;/h5&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; propsTask = file.Properties.GetImagePropertiesAsync();
&lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; props = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;await&lt;/span&gt; propsTask;
&lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; image = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; ImageDto();
image.Location = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; LocationDto
	{
    	Latitude = (&lt;span style=&#34;color: #902000&#34;&gt;double&lt;/span&gt;)props.Latitude,
        Longitude = (&lt;span style=&#34;color: #902000&#34;&gt;double&lt;/span&gt;)props.Longitude,
    };
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The ImageDto and LocationDto are classes I have created for easability, download the complete solution to get the big picture.&lt;/p&gt;

&lt;p&gt;Now with the coordinates in hand we can translate those to a location:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;async&lt;/span&gt; Task&amp;lt;&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;&amp;gt; ReverseGeocode(LocationDto location)
{
    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Location to reverse geocode.&lt;/span&gt;
    BasicGeoposition basicLocation = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; BasicGeoposition();
    basicLocation.Latitude = location.Latitude;
    basicLocation.Longitude = location.Longitude;
    Geopoint pointToReverseGeocode = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; Geopoint(basicLocation);

    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Reverse geocode the specified geographic location.&lt;/span&gt;
    MapLocationFinderResult result =
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;await&lt;/span&gt; MapLocationFinder.FindLocationsAtAsync(pointToReverseGeocode);

    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// If the query returns results, display the name of the town&lt;/span&gt;
    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// contained in the address of the first result.&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (result.Status == MapLocationFinderStatus.Success)
    {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; result.Locations[&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;].Address.Town +
            &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt; + result.Locations[&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;].Address.Country;
    }

    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt;.Empty;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;I found this code somewhere on MSDN (can&amp;rsquo;t remember the link) so I can&amp;rsquo;t take credit for that, but it works :)
Basically we are just querying the Bing Maps service and returning the result.&lt;/p&gt;

&lt;h5 id=&#34;updating-the-map-control:97c9c115bbf6f31b9c608647d5037e48&#34;&gt;Updating the Map control&lt;/h5&gt;

&lt;p&gt;Here&amp;rsquo;s how to center the Map control to the location of choice:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;MapControl.Center = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; Geopoint(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; BasicGeoposition()
{
	Latitude = image.Location.Latitude,
    Longitude = image.Location.Longitude
});
MapControl.ZoomLevel = &lt;span style=&#34;color: #40a070&#34;&gt;17&lt;/span&gt;;
MapControl.LandmarksVisible = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;true&lt;/span&gt;;
MapControl.MapElements.Clear();
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;deploying-to-windows-10-on-raspberry-pi-2:97c9c115bbf6f31b9c608647d5037e48&#34;&gt;Deploying to Windows 10 on Raspberry Pi 2&lt;/h4&gt;

&lt;p&gt;Now this is easy! All we have to do is change the debug option in Visual Studio to ARM and select Remote Machine and enter the IP adddress of the Pi. Remember to change authentication mode to None (default is Windows). Also, change the build type to Release - then you get rid of the diagnostics numbers in the top corners, but this heavily increases the build time.&lt;/p&gt;

&lt;p&gt;For more info on deploying an UWP to Windows 10 have a look &lt;a href=&#34;http://ms-iot.github.io/content/en-US/win10/samples/HelloWorld.htm&#34;&gt;here!&lt;/a&gt; Look for the paragraph &amp;ldquo;Deploy the app to your Windows IoT Core device&amp;rdquo; This guide also contains instructions on how to set the application as the startup application. By doing so you can plug the photo Pi to your TV and once powered on you will have your very own photo viewer on the big screen!&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it - remember you can find the &lt;strong&gt;complete solution right &lt;a href=&#34;http://1drv.ms/1GOcRvK&#34;&gt;here!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Backup to OneDrive or Other Cloud Storage Using a Simpel Script</title>
      <link>http://systemout.net/2014/12/29/backup-to-onedrive-or-other-cloud-storage-using-a-simpel-script</link>
      <pubDate>Mon, 29 Dec 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2014/12/29/backup-to-onedrive-or-other-cloud-storage-using-a-simpel-script</guid>
      <description>

&lt;h2 id=&#34;getting-started:c3e3703607cf7f48e936440f5c5b5483&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;I have a Office 365 Home/Family subscription that I use to get access to the latest version of the Office pack, get 1 TB (yes, tera byte) of included OneDrive storage and best of all; included in the subscription, is the possibility to add up to 4 other members of my family. That means that my girlfriend can get 1 TB online storage, without paying a dime, and for me that means I don&amp;rsquo;t have to worry about helping her backup all of her photos and other stuff.&lt;/p&gt;

&lt;p&gt;Now this is NOT a commecial for Microsoft/OneDrive, but the product they are offering are just amazing!
To backup your files to the cloud, as I will walk you through in this guide, you can use any of the existing cloud storage providers; Dropbox, OneDrive/SkyDrive, you name it.&lt;/p&gt;

&lt;p&gt;As a developer I have a ton of files on my system that I would hate to loose. This includes all the source code for the countless amount of projects I have worked upon in my spare time.
All of these files I like to be able to control where they are physically stored on my hard drive, for instance I like to have a folder in C:\Dev where I store all my development projects.
Surely I have set up a local subversion server hosted on my NAS, but what if the house burns to the ground?
Therefore I needed to set up a backup of the subversion files on the NAS to be copied to OneDrive.
Here&amp;rsquo;s how it&amp;rsquo;s done!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a BAT file&lt;/li&gt;
&lt;li&gt;Create a Scheduled Task&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And that&amp;rsquo;s it!&lt;/p&gt;

&lt;h3 id=&#34;the-bat-script-robocopy:c3e3703607cf7f48e936440f5c5b5483&#34;&gt;The BAT Script, ROBOCOPY&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m going to use ROBOCOPY, simple because it&amp;rsquo;s amazing and has some features that I need for things to work the way I intend.
Below is the command that we&amp;rsquo;re going to run, in all its flavor. I will explain each part of the command afterwards.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #888888&#34;&gt;robocopy X:\.subversion C:\Users\Nicklas\SkyDrive\Backup\MYNAS\.subversion /e /mir /log:C:\Users\Nicklas\SkyDrive\Backup\subversion_backup_log_%date:~-4,4%%date:~-10,2%%date:~-7,2%_%time:~0,2%-%time:~3,2%-%time:~6,2%.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The syntax is as follows:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #888888&#34;&gt;robocopy [source] [destination] params &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Source and destination should be obvious.
The parameters explained:
/e : Copies all subfolders
/mir : Will only copy newer/added files. Making the backup kind of incremental.
/log : The path to store the log file.&lt;/p&gt;

&lt;p&gt;Speaking of the log file; I using the syntaxt above to get a timestamp to put in the file name of the log file - otherwise it will just get overridden each time the backup is running. Depending on your Windows locale, that syntaxt might be different.&lt;/p&gt;

&lt;h3 id=&#34;scheduled-task:c3e3703607cf7f48e936440f5c5b5483&#34;&gt;Scheduled Task&lt;/h3&gt;

&lt;p&gt;Open the the Task Scheduler, goto Run and enter:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;Taskschd.msc
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Choose Create Task.
Give it a name and select the &lt;strong&gt;Triggers tab&lt;/strong&gt; and then &lt;strong&gt;New&lt;/strong&gt;. Select &lt;strong&gt;Daily&lt;/strong&gt; and leave the rest as defaults.
Select the &lt;strong&gt;Actions tab&lt;/strong&gt; and then &lt;strong&gt;New&lt;/strong&gt;.
Enter the path to the BAT script created in the previous step (I have stored mine in my OneDrive backup folder for ease of access).
Then the last thing: Go to &lt;strong&gt;Settings tab&lt;/strong&gt; click the &lt;strong&gt;If the task fails, restart every&lt;/strong&gt; to make sure that the backup will be performed.&lt;/p&gt;

&lt;p&gt;And we&amp;rsquo;re done!&lt;/p&gt;

&lt;h2 id=&#34;important:c3e3703607cf7f48e936440f5c5b5483&#34;&gt;Important&lt;/h2&gt;

&lt;p&gt;This wil only copy/replace new and existing files, it will not delete files no longer in the source.
A fix for this is to manually &amp;ldquo;resetting&amp;rdquo; the destination files by deleting them and running a full backup from scratch one in a while.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android AutoComplete EditText with history</title>
      <link>http://systemout.net/2014/12/19/android-autocomplete-edittext-with-history</link>
      <pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2014/12/19/android-autocomplete-edittext-with-history</guid>
      <description>

&lt;h2 id=&#34;introduction:38e3a693750fbbc9de009236bbf4ab07&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this post I&amp;rsquo;m going to show you have to get an Android app to have some autocomplete/history functionality.
You can achieve this by using the AutoCompleteEditText.&lt;/p&gt;

&lt;p&gt;If you havent already set up Android Studio, then [see this post]() where I guide you on installing Android Studio and getting completely set up for Android development!&lt;/p&gt;

&lt;h2 id=&#34;the-auto-complete-edittext:38e3a693750fbbc9de009236bbf4ab07&#34;&gt;The Auto Complete EditText&lt;/h2&gt;

&lt;p&gt;We will use the AutoCompleteEditText which is made just for this purpose.&lt;/p&gt;

&lt;p&gt;However, we need a place to store the user&amp;rsquo;s input and for that we are using SharedPreferences.&lt;/p&gt;

&lt;p&gt;It will be wrapped in a Activity, ready for you to try out!&lt;/p&gt;

&lt;h3 id=&#34;implementation:38e3a693750fbbc9de009236bbf4ab07&#34;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;First we&amp;rsquo;re going to declare the view in the actovity_main.xml add the following:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;AutoCompleteTextView&lt;/span&gt;
    &lt;span style=&#34;color: #4070a0&#34;&gt;android:layout_width=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #4070a0&#34;&gt;android:layout_height=&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #4070a0&#34;&gt;android:id=&amp;quot;@+id/textInput&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #4070a0&#34;&gt;android:layout_marginTop=&amp;quot;108dp&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #4070a0&#34;&gt;android:layout_alignParentTop=&amp;quot;true&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #4070a0&#34;&gt;android:layout_alignParentLeft=&amp;quot;true&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #4070a0&#34;&gt;android:layout_alignParentRight=&amp;quot;true&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #4070a0&#34;&gt;android:editable=&amp;quot;true&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #4070a0&#34;&gt;android:hint=&amp;quot;Enter something&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The go to your MainActivity.java and we&amp;rsquo;re going to setup the methods and variables we need to store the history in the SharedPreferences.
Create a couple of class variables:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;final&lt;/span&gt; String PREFS_NAME &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;PingBusPrefs&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;final&lt;/span&gt; String PREFS_SEARCH_HISTORY &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;SearchHistory&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; SharedPreferences settings&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; Set&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; history&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

These should explain them selves; it is just some strings used as keys for the preferences and the the settings variable and a set to contain the actual data of the history/input from the user.&lt;/p&gt;

&lt;p&gt;Now we add a method to load create an adapter used by our AutoCompletEditText to show recent history:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;setAutoCompleteSource&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    AutoCompleteTextView textView &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;AutoCompleteTextView&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; findViewById&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;textInput&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    ArrayAdapter&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; adapter &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; ArrayAdapter&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;(&lt;/span&gt;
		&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; android&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;R&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;layout&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;simple_list_item_1&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; history&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;toArray&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color: #666666&#34;&gt;[&lt;/span&gt;history&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()]));&lt;/span&gt;
    textView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;setAdapter&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;adapter&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Then we add a method we can call to add a history item:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;addSearchInput&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;String input&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(!&lt;/span&gt;history&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;input&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        history&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;input&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
        setAutoCompleteSource&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Last but not least, we&amp;rsquo;re going to implement the save method, so that we can save the preferences:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;savePrefs&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    SharedPreferences settings &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; getSharedPreferences&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;PREFS_NAME&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
    SharedPreferences&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;Editor&lt;/span&gt; editor &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; settings&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;edit&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
    editor&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;putStringSet&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;PREFS_SEARCH_HISTORY&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; history&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;

    editor&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;commit&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now that we have these methods, we&amp;rsquo;re going to initialize everything in the onCreate method. First add these 3 lines:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;settings &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; getSharedPreferences&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;PREFS_NAME&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
history &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; settings&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getStringSet&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;PREFS_SEARCH_HISTORY&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; HashSet&lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;());&lt;/span&gt;

setAutoCompleteSource&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

This will initilize the settings and read the history from the settings.
Then we&amp;rsquo;re going to wire up the onKey event on the AutoCompleteEditText and write the implementation to to listen for &amp;ldquo;Enter&amp;rdquo; key presses:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Set the &amp;quot;Enter&amp;quot; event on the search input&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;final&lt;/span&gt; AutoCompleteTextView textView &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;AutoCompleteTextView&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; findViewById&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;R&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;textInput&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;);&lt;/span&gt;
textView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;setOnKeyListener&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; View&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;OnKeyListener&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;onKey&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;View v&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;int&lt;/span&gt; keyCode&lt;span style=&#34;color: #666666&#34;&gt;,&lt;/span&gt; KeyEvent event&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// If the event is a key-down event on the &amp;quot;enter&amp;quot; button&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;((&lt;/span&gt;event&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getAction&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; KeyEvent&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;ACTION_DOWN&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;keyCode &lt;span style=&#34;color: #666666&#34;&gt;==&lt;/span&gt; KeyEvent&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;KEYCODE_ENTER&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;

            addSearchInput&lt;span style=&#34;color: #666666&#34;&gt;(&lt;/span&gt;textView&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;getText&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;());&lt;/span&gt;
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now the last thing we need, is to call the savePrefs method in the onStop method which will then make sure that anychanges made to the history will be copied to the settings and the settings will be save:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #555555; font-weight: bold&#34;&gt;@Override&lt;/span&gt;
&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;onStop&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;onStop&lt;/span&gt;&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;

    savePrefs&lt;span style=&#34;color: #666666&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #666666&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to build and deploy octopress with a single click, part 1</title>
      <link>http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p1</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p1</guid>
      <description>

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;
It is no longer required to use Ruby 1.9.3 with Octopress so the post has been updated accordingly.
Also, installation instructions for Python is added because this is required for the build process to work.&lt;/p&gt;

&lt;h2 id=&#34;introduction:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this guide I will guide you to how you can build and deploy your Octopress site with a single mouse click. That is; building Octopress on your Windows computer and deploying the generated site to your web server, for example a Raspberry Pi!
To accomplish this, we will be using Ruby, rake and WinSCP and deploying it using FTP.&lt;/p&gt;

&lt;p&gt;This blog, &lt;a href=&#34;http://systemout.net&#34; title=&#34;SystemOut.net&#34;&gt;Systemout.net&lt;/a&gt;, started out just being generated on the web server/the Pi, but the Pi is not exactly made for CPU intensive work and therefore I got a little tied of waiting for even the smallest changes made to the blog to be generated.
I&amp;rsquo;m sure you know this, but Octopress needs to regenerate the entire site, primarily to keep all links inbetween the various post valid, even if something is changed. This is the disadvantage of having a static site as your blog, BUT once the generation/build/deployment process is over, you can enjoy the benefits of a static blog: Speed, simplicity, etc.&lt;/p&gt;

&lt;h2 id=&#34;steps:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Steps&lt;/h2&gt;

&lt;p&gt;There are a few steps required before you can use your Windows box to build and host Octopress on it.
But don&amp;rsquo;t worry: If you follow this guide, it will be a peace of cake!
The steps required are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#ruby&#34;&gt;Install Ruby and the Ruby SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tortoise&#34;&gt;Install Tortoise Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clone&#34;&gt;Clone Octopress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;generate&#34;&gt;Generate your Octopress site and preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deploy&#34;&gt;Deploy&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;installing-ruby-and-the-ruby-sdk-on-windows-a-name-ruby-a:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Installing Ruby and the Ruby SDK on Windows&lt;a name=&#34;ruby&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;You can find the various Ruby downloads &lt;a href=&#34;http://rubyinstaller.org/downloads/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.2.2.exe&#34;&gt;And here is a direct download link for Ruby 2.2.2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For Ruby version 2.2.2 we need the mingw64-32-4.7.2 of the Ruby SDK. This can be found &lt;a href=&#34;http://dl.bintray.com/oneclick/rubyinstaller/DevKit-mingw64-32-4.7.2-20130224-1151-sfx.exe&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We need to make some manual changes for the Ruby SDK to function properbly. Open a command prompt and cd to the location where you extracted the Ruby SDK, let&amp;rsquo;s say it is in C:\RubySdk and run the following 3 commands:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    C:\RubySdk&amp;gt;devkitvars.bat
    C:\RubySdk&amp;gt;ruby dk.rb init
    C:\RubySdk&amp;gt;ruby dk.rb install
&lt;/pre&gt;&lt;/div&gt;

Lastly we can test to see that the correct version of Ruby is installed by running:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	C:\&amp;gt;ruby --version
&lt;/pre&gt;&lt;/div&gt;

which should give us something like:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	ruby &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color: #40a070&#34;&gt;9&lt;/span&gt;.&lt;span style=&#34;color: #40a070&#34;&gt;3&lt;/span&gt;p&lt;span style=&#34;color: #40a070&#34;&gt;551&lt;/span&gt; (&lt;span style=&#34;color: #40a070&#34;&gt;2014-11-13&lt;/span&gt;) [i&lt;span style=&#34;color: #40a070&#34;&gt;386&lt;/span&gt;-mingw&lt;span style=&#34;color: #40a070&#34;&gt;32&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;

&amp;hellip;and that&amp;rsquo;s it for the Ruby installation!&lt;/p&gt;

&lt;h3 id=&#34;install-python:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Install Python&lt;/h3&gt;

&lt;p&gt;Pretty simple: Go to &lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;the official site&lt;/a&gt; to get the latest installer and install it.&lt;/p&gt;

&lt;h3 id=&#34;install-tortoise-git-a-name-tortoise-a:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Install Tortoise Git&lt;a name=&#34;tortoise&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This step is pretty straight forward; simply download and install the Tortoise Git client from &lt;a href=&#34;https://code.google.com/p/tortoisegit/wiki/Download&#34;&gt;here&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&#34;clone-octopress-a-name-clone-a:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Clone Octopress&lt;a name=&#34;clone&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Now we&amp;rsquo;re setup and ready the start with the fun stuf!&lt;/p&gt;

&lt;p&gt;Open a command prompt, cd to the directory where you want your Octopress cloned into and run:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    git clone git://github.com/imathis/octopress.git octopress
&lt;/pre&gt;&lt;/div&gt;

Now cd to the octopress dir and install some gems:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;cd&lt;/span&gt; octopress
	gem install bundler
	bundle install
&lt;/pre&gt;&lt;/div&gt;

&lt;strong&gt;Note:&lt;/strong&gt; If you get an error like:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	Gem&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;::RemoteFetcher::FetchError: SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B:certificate verify failed (https://rubygems.org/gems/listen-2.8.4.gem)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Then you need to change the URL of the rubygems location. This is done in the Gemfile. The Gemfile is located in the Octopress directory as you just cloned from Git and &lt;strong&gt;after&lt;/strong&gt; correction it should look like:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	source &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;http://rubygems.org&amp;quot;&lt;/span&gt;

	group &lt;span style=&#34;color: #517918&#34;&gt;:development&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;do&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;rake&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 10.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 2.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;octopress-hooks&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 2.2&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;octopress-date-format&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 2.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;jekyll-sitemap&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;rdiscount&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 2.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;RedCloth&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 4.2.9&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;haml&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 4.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;compass&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 0.12.2&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;sass-globbing&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 1.0.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;rubypants&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 0.2.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;rb-fsevent&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 0.9&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;stringex&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 1.4.0&amp;#39;&lt;/span&gt;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;end&lt;/span&gt;

	gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 1.4.2&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Save the Gemfile and rerun the command
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	bundle install
&lt;/pre&gt;&lt;/div&gt;

Finally we need to run this command:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	rake install
&lt;/pre&gt;&lt;/div&gt;

And that&amp;rsquo;s it - now Ruby is installed, Octopress is cloned and ready to be generated!&lt;/p&gt;

&lt;h3 id=&#34;generate-your-octopress-site-and-preview-a-name-generate-a:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Generate your Octopress site and preview&lt;a name=&#34;generate&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Now we need to build our Octopress site using the generate command:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	rake generate
&lt;/pre&gt;&lt;/div&gt;

This should take no time and now we can start a web server for previewing the generated site:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	rake preview
&lt;/pre&gt;&lt;/div&gt;

Now browse to &lt;a href=&#34;http://localhost:4000&#34;&gt;localhost:4000&lt;/a&gt; - and you should see you new Octopress site! :)&lt;/p&gt;

&lt;h3 id=&#34;deploying-to-you-web-server-a-name-deploy-a:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Deploying to you web server&lt;a name=&#34;deploy&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;You could of course just keep you blog hosted on localhost:4000, but what&amp;rsquo;s the fun in that?
No where - therefore I&amp;rsquo;m going to show you how to deploy the generated blog to you Raspberry Pi or other web server using a little bit of command line magic combined with WinSCP and FTP. There are some steps involved in this so I wrote another blog post of how to do that. You can find the post &lt;a href=&#34;http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p2/&#34;&gt;right here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it! Feel free to leave any comments/ask questions in the comment fields below.&lt;/p&gt;

&lt;p&gt;Thanks for reading :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to build and deploy octopress with a single click, part 2 </title>
      <link>http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p2</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p2</guid>
      <description>

&lt;h2 id=&#34;introduction:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post is a continuation of the post about generating an Octopress site on a Windows machine and deploying it to a web server/Raspberry Pi.
You can find the post about setting up your Windows dev box to generate the Octopress site &lt;a href=&#34;http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p1/&#34;&gt;right here&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&#34;steps:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Steps&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#winscp&#34;&gt;Donwload and install WinSCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ftp&#34;&gt;Enable FTP on the Raspberry Pi/web server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#winscpscript&#34;&gt;Create WinSCP script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deploy&#34;&gt;Create build and deployment script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#run&#34;&gt;Run!&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;download-and-install-winscp-a-name-winscp-a:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Download and install WinSCP&lt;a name=&#34;winscp&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;You can grab the latest version of WinSCP from &lt;a href=&#34;http://winscp.net/eng/download.php&#34;&gt;here&lt;/a&gt;.
Just follow the installation instructions and you are done!&lt;/p&gt;

&lt;h3 id=&#34;enable-ftp-on-the-raspberry-pi-web-server-a-name-ftp-a:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Enable FTP on the Raspberry Pi/web server&lt;a name=&#34;ftp&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I use &lt;a href=&#34;http://www.proftpd.org/&#34;&gt;ProFTPD&lt;/a&gt; as my FTP server on the Raspberry Pi running Raspbian. On Raspbian/Debian it can be installed like this:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	apt-get install proftpd
&lt;/pre&gt;&lt;/div&gt;

Choose the standalone option when prompted.
After installation is completed, the FTP server should be running.
If you for some reason need to, you can stop/start the FTP server as follows:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	/etc/init.d/proftpd stop
	/etc/init.d/proftpd start
&lt;/pre&gt;&lt;/div&gt;

Now that&amp;rsquo;s up and running, we need to create a WinSCP script to upload the generated files.&lt;/p&gt;

&lt;h3 id=&#34;create-winscp-script-a-name-winscpscript-a:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Create WinSCP script&lt;a name=&#34;winscpscript&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Besides being a gui tool for file handling, WinSCP comes with a command line interface. Refer to the documentation &lt;a href=&#34;http://winscp.net/eng/docs/scriptcommand_synchronize&#34;&gt;here&lt;/a&gt; if you need further information.&lt;/p&gt;

&lt;p&gt;Create a new text file, name it winscpscript.scp and place it in octopress\scripts (create the scripts folder, if it doesn&amp;rsquo;t exist) and insert the following code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	option batch abort
	option confirm &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;off&lt;/span&gt;
	open username:password@ipOrHostOfWebserver
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;cd&lt;/span&gt; /srv/www/octopress
	lcd C:\octopress\public\
	synchronize remote -delete
	exit
&lt;/pre&gt;&lt;/div&gt;

In this script, the following happens:
The first 2 lines ensures that prompts are answered negativly and that confirmations are turned of.&lt;/p&gt;

&lt;p&gt;The open command connects to the FTP server using the provided username/password on the hostname or ip address of you web server.&lt;/p&gt;

&lt;p&gt;After that we change the remote directory (the directory on the server), using the cd command, to a suitable place to store our web site.&lt;/p&gt;

&lt;p&gt;Then we use the lcd command to change the local directory to the location on the Windows computer where Octopress is installed/generated. Remember that the output of the generation is in the &amp;lsquo;public&amp;rsquo; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now the magic!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using the syncrhonize command we can sync the files in the local directory with the remote directory. The remote option tells WinSCP that it is the remote directory that shall be updated with changes from the local directory. By adding the -delete option, we tell WinSCP that the synchronization should make sure that locally deleted files also gets deleted from the remote directory.&lt;/p&gt;

&lt;p&gt;Lastly we simply exit the WinSCP CLI and returning control to the caller.&lt;/p&gt;

&lt;h3 id=&#34;create-build-and-deployment-script-a-name-deploy-a:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Create build and deployment script&lt;a name=&#34;deploy&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Now we can create the build script that will enable us to build/generate and publish our Octopress site with one single click.&lt;/p&gt;

&lt;p&gt;Create new text file, name it BuildOctopress.bat and save it in octopress\scripts with the following content:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;C:\octopress\&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;call&lt;/span&gt; rake generate || true
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;C:\Program Files (x86)\WinSCP\&amp;quot;&lt;/span&gt;
	winscp /script=C:\octopress\scripts\winscpscript.scp
&lt;/pre&gt;&lt;/div&gt;

Now here is what happens in the script:&lt;/p&gt;

&lt;p&gt;First we change working directory to the location of out octopress site.&lt;/p&gt;

&lt;p&gt;Then we generate the site using rake generate. The call function is handy, because we&amp;rsquo;re calling another batch job.&lt;/p&gt;

&lt;p&gt;Now cd to the WinSCP directory.&lt;/p&gt;

&lt;p&gt;Run WinSCP and pass the script we created in the previous step.&lt;/p&gt;

&lt;p&gt;Save the file and continue to the next step.&lt;/p&gt;

&lt;h3 id=&#34;run-a-name-run-a:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Run&lt;a name=&#34;run&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;After all the above is done, we are now able to build and deploy out Octopress site by the single click of a mouse. Simply run the BuildOctopress.bat file and wait for it to finish.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it. Please feel free to leave any comments and/or questions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How To Measure Execution Time and Performance Optimize Source Code</title>
      <link>http://systemout.net/2014/08/19/measure-execution-time-and-performance-optimize-source-code</link>
      <pubDate>Tue, 19 Aug 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2014/08/19/measure-execution-time-and-performance-optimize-source-code</guid>
      <description>

&lt;h2 id=&#34;why-should-you-measure-your-source-code:e101fc7e35c9091dc41dd896bd262d34&#34;&gt;Why Should You Measure Your Source Code?&lt;/h2&gt;

&lt;p&gt;I work by the princip; don&amp;rsquo;t optimize until needed. Which means that I write the code, make sure it does what it is supposed to, compile, test and release and &lt;strong&gt;then if&lt;/strong&gt; a bottleneck is found, I try to optimize it.&lt;/p&gt;

&lt;p&gt;But before I&amp;rsquo;m able to optimize, I need to be able to measure for the simple reason that otherwise I&amp;rsquo;m not able to determine wheter or not the optimization actually hard an inpact and most importantly; that it did not have a negative impact on the performance.&lt;/p&gt;

&lt;p&gt;For that simple reason, I have written a small component that is able to measure the time a specific operation takes to complete. The component uses the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/system.diagnostics.stopwatch.aspx&#34; title=&#34;Stopwatch class on MSDN&#34;&gt;Stopwatch class&lt;/a&gt;, which seemed to be a good choise for the purpose, but I must say I haven&amp;rsquo;t made througly analasys of wheter this class is the best suited for the job.&lt;/p&gt;

&lt;h3 id=&#34;results:e101fc7e35c9091dc41dd896bd262d34&#34;&gt;Results&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s always a good idea to prove the importance of the contents of a post, before actually writting the post, so here are some simple results (and also reasons) for code optimization:&lt;/p&gt;

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;b&gt;Method&lt;/td&gt;
        &lt;td&gt;&lt;b&gt;Iterations&lt;/td&gt;
        &lt;td&gt;&lt;b&gt;Average in miliseconds&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;MaxFactor1 for 123456789&lt;/td&gt;
        &lt;td&gt;50&lt;/td&gt;
        &lt;td&gt;557,48&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;MaxFactor2 for 123456789&lt;/td&gt;
        &lt;td&gt;50&lt;/td&gt;
        &lt;td&gt;0,04&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;  

&lt;p&gt;Basicly I have taken the samples from &lt;a href=&#34;http://stackoverflow.com/questions/2535251/c-finding-the-largest-prime-factor-of-a-number&#34;&gt;this StackOverflow post&lt;/a&gt; and measured 2 of the solutions, see for clarity I have included the Maxfactor1 and 2 method at the bottom of this post.&lt;/p&gt;

&lt;p&gt;The point of the above table is to show the big difference in the performance of the 2 Maxfactor methods - when run 50 times the average time taken is much faster in the Maxfactor2 method.&lt;/p&gt;

&lt;h2 id=&#34;the-measurement-component:e101fc7e35c9091dc41dd896bd262d34&#34;&gt;The Measurement Component&lt;/h2&gt;

&lt;p&gt;You can download the source/solution &lt;a href=&#34;http://1drv.ms/1qn4PNM&#34; title=&#34;Solution on OneDrive&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I wanted to make an easy to use component with minimal impact on the actual code that do the main stuff in the application.
To accomplish this, I have written a &lt;strong&gt;Time&lt;/strong&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Time(Action actionToTime, int numberOfRuns, string actionIdentifier)
    {
        var sw = new Stopwatch();
        var resultSet = GetResultSet(actionIdentifier);
        for (var i = 0; i &amp;lt; numberOfRuns; i++)
        {
            var executionTime = DateTime.Now;
            sw.Start();
            actionToTime();
            sw.Stop();

            resultSet.Results.Add(new Result
            {
                Elapsed = sw.ElapsedMilliseconds,
                TimeOfExecution = executionTime,
            });

            sw.Reset();
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which can be invoked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    [TestMethod]
    public void TestDownloadString()
    {
        var tm = new TimeMeasurement();
        tm.Time(() =&amp;gt; DownloadString(&amp;quot;http://systemout.net&amp;quot;), 50, &amp;quot;DownloadString&amp;quot;);

        tm.FlushResultsAsync().Wait();
    }

    public void DownloadString(string url)
    {
        using (var web = new WebClient())
        {
            web.DownloadString(new Uri(url));
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the thing that&amp;rsquo;s happening in the Time method is that we&amp;rsquo;re using a Stopwatch to measure the execution time of the method. Furthermore we&amp;rsquo;re adding a ResultSet (see below) for the given actionIdentifier. This is used to keep track of the results for the given actionIdentifier so it later can be flushed to a file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    public async Task FlushResultsAsync()
    {
        // First get a copy of the results so no modifications are made
        // while we process the results.
        var results = resultSets.Values.ToList();
        resultSets.Clear();

        await writer.WriteResultSetsAsync(results);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The writer is for the time being a CSV text writer implementation. I plan on making it an IResultWriter so that the caller can provide it&amp;rsquo;s own writer implementation to control how the timing output is stored - for now it is written to a file in C:\Users\USERNAME\AppData\Roaming\SystemOut\Performance&lt;/p&gt;

&lt;p&gt;You can download the complete source including the solution/project files &lt;a href=&#34;http://1drv.ms/1qn4PNM&#34; title=&#34;Solution on OneDrive&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;maxfactor-methods:e101fc7e35c9091dc41dd896bd262d34&#34;&gt;Maxfactor Methods&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m not a math genious, but from the below source it seems that it&amp;rsquo;s much faster to go from largest number and down then the other way around. Obviously. :)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    static private long Maxfactor1(long n)
    {
        for (var k = n / 2; k &amp;gt; 1; k--)
        {
            if (n % k == 0 &amp;amp;&amp;amp; Prime(k))
            {
                return k;
            }
        }

        return 1;
    }

    static private long Maxfactor2(long n)
    {
        long k = 2;
        while (k * k &amp;lt;= n)
        {
            if (n % k == 0)
            {
                n /= k;
            }
            else
            {
                ++k;
            }
        }

        return n;
    }

    static private bool Prime(long x)
    {
        for (long i = 2; i &amp;lt;= x / 2; i++)
        {
            if (x % i == 0)
                return false;
        }
        return true;
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Calling SignalR Hub from a C# WCF Service</title>
      <link>http://systemout.net/2014/07/25/calling-signalr-hub-from-a-csharp-wcf-service</link>
      <pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2014/07/25/calling-signalr-hub-from-a-csharp-wcf-service</guid>
      <description>

&lt;h2 id=&#34;introduction:1c0b33ef5ca6cf9a2ff28d934b29da72&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: See all my SignalR tutorials &lt;a href=&#34;http://systemout.net/categories/signalr/&#34;&gt;right here&lt;/a&gt; or find a post about how to list users that are connected &lt;a href=&#34;http://systemout.net/2015/06/10/developing-a-who-is-on-chat-web-app-using-signalr-and-wpf/&#34;&gt;right here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Download the source for this tutorial here: &lt;a href=&#34;http://1drv.ms/1qEpMtQ&#34;&gt;http://1drv.ms/1qEpMtQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a previous blog post I wrote a tutorial on how to develop and deploy a simple SignalR chat application using the bare minimum as a proof of concept. You can find that post right here: &lt;a href=&#34;http://systemout.net/2014/07/17/developing-and-deploying-a-signalr-chat-web-app-to-iis/&#34;&gt;http://systemout.net/2014/07/17/developing-and-deploying-a-signalr-chat-web-app-to-iis/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial, we are going to make a WCF service that can talk to the SignalR chat app and broadcast messages from &amp;ldquo;the system&amp;rdquo; - not by a user.
SignalR is easy to use with JavaScript, but if you need to broadcast messages to the SignalR hub, you need to use a browser (JavaScript) or otherwise things get a little more complicated.
This tutorial, will guide you to calling SignalR hub methods from a WCF service that recides in a different DLL than the SignalR host.&lt;/p&gt;

&lt;h3 id=&#34;setup:1c0b33ef5ca6cf9a2ff28d934b29da72&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;This tutorial uses the Chat web app as implemented in the previous mention blog post, you can find the solution from that post rigth here: &lt;a href=&#34;http://1drv.ms/1wB5IWF&#34;&gt;http://1drv.ms/1wB5IWF&lt;/a&gt;
Oh, and if you want to see the app in action, you can try it out right here: &lt;a href=&#34;http://systemout.net:56677/ChatWebApp/Messenger.html?username=User1&#34;&gt;http://systemout.net:56677/ChatWebApp/Messenger.html?username=User1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are going to add a WCF service to the ChatWebApp solution and provide functionality that allows the WCF service to invoke methods on the SignalR hub.&lt;/p&gt;

&lt;h3 id=&#34;creating-the-wcf-service:1c0b33ef5ca6cf9a2ff28d934b29da72&#34;&gt;Creating the WCF Service&lt;/h3&gt;

&lt;p&gt;Open up the ChatWebApp solution.
Add a WCF Service Application, name it WcfService:
&lt;img src=&#34;http://systemout.net/images/SignalRCreateWcfServiceProject.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Now add the SignalR depencies, right click References &amp;gt; Manage NuGet Packages &amp;gt; Search for SignalR &amp;gt; Install &lt;strong&gt;Microsoft ASP.NET SignalR .NET Client&lt;/strong&gt; and &lt;strong&gt;Microsoft ASP.NET SignalR Core Components&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We also need a reference to the ChatWebApp project, so if you are not building on the ChatWebApp project which you can download in the top of this post, you need to write your own Hub class. But, for this tutorial we are using the ChatWebApp, so add a reference to that project.&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- ResponsiveHeader --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-5807169669170468&#34;
     data-ad-slot=&#34;5652122954&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;VS have created the basic files needed to host the WCF Service but I have renamed the IService1.cs and Service1.cs to ISystemService.cs and SystemService.
Replace the code in &lt;strong&gt;SystemService.cs&lt;/strong&gt; with:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;SystemService&lt;/span&gt; : ISystemService
    {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;readonly&lt;/span&gt; IHubProxy messageHub;

        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;SystemService&lt;/span&gt;()
        {
            &lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; connection = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; HubConnection(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;http://localhost:yourport/~/&amp;quot;&lt;/span&gt;);
            messageHub = connection.CreateHubProxy(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;MessageHub&amp;quot;&lt;/span&gt;);
            connection.Start().Wait();
        }

        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;SendMessage&lt;/span&gt;(&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; sender, &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; message)
        {
            messageHub.Invoke(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;SendMessage&amp;quot;&lt;/span&gt;, sender, message);
        }
    }
&lt;/pre&gt;&lt;/div&gt;

In the constructor of the service were a making a connection to the hub and creating a proxy for the MessageHub in the ChatWebApp project and last we are starting the connection.
Maybe you don&amp;rsquo;t need the ~ at the end of the hub connection URL, but again, if working on the ChatWebApp you do.&lt;/p&gt;

&lt;p&gt;The service publishes one operation: SendMessage. I don&amp;rsquo;t think further introduction to the workings are required, &lt;strong&gt;but&lt;/strong&gt; it is important the the method we are invoking on the hub is written exactly as it is named in the hub.&lt;/p&gt;

&lt;p&gt;Now to the interface; replace the code in the ISystemService.cs whit this:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;    [ServiceContract]&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;interface&lt;/span&gt; ISystemService
    {
&lt;span style=&#34;color: #4070a0&#34;&gt;        [OperationContract]&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;SendMessage&lt;/span&gt;(&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; sender, &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; message);
    }
&lt;/pre&gt;&lt;/div&gt;

And that&amp;rsquo;s it! We are ready to run the service.
Mark the SystemService.cs file and hit F5 to bring up the WCF Test Client GUI the Visual Studio provides where you can invoke the SendMessage operation.&lt;/p&gt;

&lt;p&gt;If you want, you can try to connect to the ChatWebApp that I have running, simply create the hub connection like so:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	&lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; connection = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; HubConnection(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;http://systemout.net:56677/ChatWebApp/~/&amp;quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

Then you can go to:&lt;a href=&#34;http://systemout.net:56677/ChatWebApp/Messenger.html?username=user1&#34; target=&#34;_blank&#34;&gt; my demo site&lt;/a&gt; and see that the messages you send from your WCF service are send all the way to my server in Denmark and back to your browser :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://systemout.net/images/ChromeExample.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;You can download the updated solution including the WCF service here: &lt;a href=&#34;http://1drv.ms/1qEpMtQ&#34;&gt;http://1drv.ms/1qEpMtQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://systemout.net/2015/06/10/developing-a-who-is-on-chat-web-app-using-signalr-and-wpf/&#34;&gt;You can find my new post about how to create a &amp;ldquo;Who Is On&amp;rdquo; SignalR service right here!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How To Setup Octopress for Jekyll on a Raspberry Pi</title>
      <link>http://systemout.net/2014/07/20/how-to-setup-octopress-for-jekyll-on-a-raspberry-pi/</link>
      <pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2014/07/20/how-to-setup-octopress-for-jekyll-on-a-raspberry-pi/</guid>
      <description>

&lt;h3 id=&#34;introduction:68e5c07e240ab8ba63c1b33cbb305bb3&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;There are several things we need to take care of to make a successful installation of Octopress on the Pi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prepare the Raspbian for web hosting&lt;/li&gt;
&lt;li&gt;Install NGINX&lt;/li&gt;
&lt;li&gt;Install Git&lt;/li&gt;
&lt;li&gt;Install Curl&lt;/li&gt;
&lt;li&gt;Install RVM (Ruby Version Manager) and Ruby&lt;/li&gt;
&lt;li&gt;Finally install Octopress&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But don&amp;rsquo;t worry - all of the above is quite straight forward, although the Ruby installation might take some time.&lt;/p&gt;

&lt;h4 id=&#34;preparing-raspbian:68e5c07e240ab8ba63c1b33cbb305bb3&#34;&gt;Preparing Raspbian&lt;/h4&gt;

&lt;p&gt;First of you need a running Raspbian installation. The easiest way to get this, is by downloading it from &lt;a href=&#34;http://www.raspberrypi.org/downloads/&#34;&gt;http://www.raspberrypi.org/downloads/&lt;/a&gt;.
Follow the official instructions to get up and running.&lt;/p&gt;

&lt;p&gt;This tutorial will use the terminal/SSH from a remote computer and therefore we need to make sure we can reach it over the network.
To find the Pi&amp;rsquo;s current IP write this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ifconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my case I got a eth0 inet addr:192.168.X.YYY
When using the Pi as a web server it is a good idea to give it a static IP address. I have an DHCP server where this is handled, but if you want to set up a static IP on the Pi, here is how it is done: &lt;a href=&#34;https://wiki.debian.org/NetworkConfiguration#Configuring_the_interface_manually&#34;&gt;https://wiki.debian.org/NetworkConfiguration#Configuring_the_interface_manually&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can disconnect the screen and go back to our main desktop. I use Windows and therefore Putty (&lt;a href=&#34;http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe&#34;&gt;http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe&lt;/a&gt;) to connect to Pi.&lt;/p&gt;

&lt;p&gt;I also like to give my computers a decent name (Raspbian sets the hostname to raspberrypi).
To change the hostname do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo namo /etc/hostname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the name to whatever you like and hit Ctrl+X, answer Y and the Enter to overwrite the file.
Now we need to update the hosts file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nano /etc/hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace raspberrypi with the new hostname you provided in the previous step and hit Ctrl+X, answer Y and the Enter to overwrite the file.
Reboot the Pi:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For further info on changing the hostname of see: &lt;a href=&#34;https://wiki.debian.org/HowTo/ChangeHostname&#34;&gt;https://wiki.debian.org/HowTo/ChangeHostname&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that Raspbian is installed and we have access to the Pi from SSH/Putty we need to make sure it is up to date by first collecting available updates and then upgrade/install them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install update
sudo apt-get install upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;install-nginx-curl-git-and-ruby:68e5c07e240ab8ba63c1b33cbb305bb3&#34;&gt;Install NGINX, Curl, Git and Ruby&lt;/h3&gt;

&lt;p&gt;First things first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install nginx git curl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With my Raspbian install I actually only needed to install NGINX, but just run the above to be sure to have what wee need, no damage done.&lt;/p&gt;

&lt;p&gt;No RVM and Ruby:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\curl -L https://get.rvm.io | bash -s stable --ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;to get the latest stable RVM.
This process takes some time, on my Pi it took about &lt;strong&gt;1 and  a half hour&lt;/strong&gt;, so go watch some Simpsons. :)&lt;/p&gt;

&lt;p&gt;To start using RVM you need to run the command the installer tells you to or simply reconnect to the terminal.&lt;/p&gt;

&lt;p&gt;According to the Octopress docs, &lt;a href=&#34;http://octopress.org/docs/setup/rvm/&#34;&gt;http://octopress.org/docs/setup/rvm/&lt;/a&gt;, we need Ruby version 1.9.3.
Therefore we do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm install 1.9.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command also took an hour or so on my Pi, but the rest should be easyly done.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm use 1.9.3
rvm rubygems latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now check the the correct Ruby version is used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby --version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should display 1.9.3-something.&lt;/p&gt;

&lt;h3 id=&#34;installing-octopress:68e5c07e240ab8ba63c1b33cbb305bb3&#34;&gt;Installing Octopress&lt;/h3&gt;

&lt;p&gt;To install Octopress from Git run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://github.com/imathis/octopress.git octopress
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;where the last option &amp;lsquo;octopress&amp;rsquo; is the name of the site/directory for your Octopress installation. I name mine according to the site I&amp;rsquo;m going to host.&lt;/p&gt;

&lt;p&gt;Now we need to install Octopress&amp;rsquo; dependencies.
Browse to the name of the directory which you specified in the git command, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd octopress
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install bundler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and lastly&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install the default Octopress theme:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rake install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setting-up-nginx:68e5c07e240ab8ba63c1b33cbb305bb3&#34;&gt;Setting up NGINX&lt;/h3&gt;

&lt;p&gt;NGINX has a folder where it stores configuration for different sites.
We use nano to create a new configuration file for our site:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nano /etc/nginx/sites-available/DOMAIN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then copy the following into the new file, remeber to change IPOFTHEPI and DOMAIN with your values. Also, if you gave another name for your Octopress installation in previeus steps, change the path in the location accordingly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
    listen IPOFTHEPI:80;
    server_name DOMAIN;

        location / {
            root /home/pi/octopress/public;
            index index.html index.htm;
            access_log /home/pi/octopress/source/YOURDOMAIN.access.log;
            error_log /home/pi/octopress/source/YOURDOMAIN.error.log;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the new file.&lt;/p&gt;

&lt;p&gt;Create a link from the created file to the NGINX enabled sites directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /etc/nginx/sites-enabled
ln -s /etc/nginx/sites-available/DOMAIN /etc/nginx/sites-enabled/DOMAIN
ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart NGINX:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/init.d/nginx restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;Now all theres left to be done, is setting up your blog/site by following the guidelines on the official Octopress web site: &lt;a href=&#34;http://octopress.org/&#34;&gt;http://octopress.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to ease the generation and deployment process, you can build the blog on your windows machine and deploy it to the Raspberry Pi in a single click. Learn how to set this up by reading my guide here: &lt;a href=&#34;http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p1/&#34;&gt;http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p1/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developing and Deploying a SignalR Chat Web App to IIS</title>
      <link>http://systemout.net/2014/07/17/developing-and-deploying-a-signalr-chat-web-app-to-iis/</link>
      <pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2014/07/17/developing-and-deploying-a-signalr-chat-web-app-to-iis/</guid>
      <description>

&lt;h2 id=&#34;introduction:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Download the complete solution: &lt;a href=&#34;http://1drv.ms/1wB5IWF&#34;&gt;http://1drv.ms/1wB5IWF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial I&amp;rsquo;m going to show you how you with ease can develop and deploy you very own SignalR Chat App!&lt;/p&gt;

&lt;p&gt;The SignalR framework is great for bidirectional communication becauses it uses WebSockets. SignalR handles all the connections and you just need to focuse on implementing your business logic.
&lt;strong&gt;But&lt;/strong&gt;, I have found, that it can be a bit of a fuzz to setup, and to get a connection to the SignalR Hub (which I&amp;rsquo;ll explain in details in a bit), and therefore I wrote this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE&lt;/em&gt;: I have posted &lt;a href=&#34;http://systemout.net/2015/06/10/developing-a-who-is-on-chat-web-app-using-signalr-and-wpf/&#34;&gt;a new tutorial&lt;/a&gt; showing how it is possible to let the clients see who is online. That post builds on this tutorial, so check it out after you have read this one!&lt;/p&gt;

&lt;h3 id=&#34;the-setup:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;The Setup&lt;/h3&gt;

&lt;p&gt;We are going to need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A HTML page&lt;/li&gt;
&lt;li&gt;A javaScript&lt;/li&gt;
&lt;li&gt;A MessageHub (C#)&lt;/li&gt;
&lt;li&gt;A Startup file (also C#)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of the above wrapped in a ASP.NET Web Application solution.&lt;/p&gt;

&lt;p&gt;Before we begin, you can take a look at the product right here:
&lt;a href=&#34;http://systemout.net:56677/ChatWebApp/Messenger.html?username=User1&#34;&gt;http://systemout.net:56677/ChatWebApp/Messenger.html?username=User1&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;implementing-the-solution:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;Implementing the Solution&lt;/h2&gt;

&lt;p&gt;An important note: It is critical that you create a &lt;strong&gt;ASP.NET Web Application&lt;/strong&gt; and &lt;strong&gt;NOT&lt;/strong&gt; a ASP.NET Web Site. Maybe you know that all future web apps should be created as such, as stated by Microsoft, but I didn&amp;rsquo;t and learned it the hard way (meaning my SignalR app didn&amp;rsquo;t work and it took some hours figuring out why not&amp;hellip;).&lt;/p&gt;

&lt;p&gt;But let&amp;rsquo;s get started; fire up Visual Studio, and select File &amp;gt; New &amp;gt; &lt;strong&gt;New Project&lt;/strong&gt;
&lt;img src=&#34;http://systemout.net/images/NewAspNewWebApplication.png&#34; alt=&#34;CPU usage&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Name it ChatWebApp.&lt;/p&gt;

&lt;p&gt;Create and empty project:
&lt;img src=&#34;http://systemout.net/images/EmptyProject.png&#34; alt=&#34;CPU usage&#34; /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;signalr-nuget-packages:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;SignalR NuGet packages&lt;/h4&gt;

&lt;p&gt;There are several ways to start of creating a SignalR enabled project, and you can add a new Hub or a OWIN Startup class directly from Visual Studio&amp;rsquo;s context menues, but I found that I didn&amp;rsquo;t get the lates stable SignalR version when doing so.
Therefore, we are going to add the NuGet packages needed manually:
Right click your new project &amp;gt; Manage NuGet Packages
Click Install to Microsoft ASP.NET SignalR:
&lt;img src=&#34;http://systemout.net/images/SignalRNuget.png&#34; alt=&#34;CPU usage&#34; /&gt;

It will also ask you to install various other packages needed, but the hole process is automated, so no trouble there.&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- links1 --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:inline-block;width:728px;height:15px&#34;
     data-ad-client=&#34;ca-pub-5807169669170468&#34;
     data-ad-slot=&#34;6444119354&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;h4 id=&#34;owin-startup:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;OWIN Startup&lt;/h4&gt;

&lt;p&gt;To do the wire up/mapping of SignalR wee use OWIN.
Simply right click your project, and select Add. Search for OWIN and add a new Startup.cs file.
Replace the content of the file with this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;System&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;System.Threading.Tasks&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;Microsoft.AspNet.SignalR&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;Microsoft.Owin&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;Owin&lt;/span&gt;;

&lt;span style=&#34;color: #4070a0&#34;&gt;	[assembly: OwinStartup(typeof(ChatWebApp.Startup))]&lt;/span&gt;

	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ChatWebApp&lt;/span&gt;
	{
    	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;Startup&lt;/span&gt;
    	{
        	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;Configuration&lt;/span&gt;(IAppBuilder app)
        	{
            	&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=316888&lt;/span&gt;
            	app.MapSignalR(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;/~/signalr&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; HubConfiguration());
        	}
    	}
	}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The important things here are of course the assembly annotation where we declare that the type ChatWebApp.Startup (this class) should be used by OWIN.
The next thing to note is the MapSignalR method call. By default, VS just uses the MapSignalR method without any parameters, and this works well - when developing on running locallyt, but I have got it to work in a production IIS. Therefore the manually mapping path used for SignalR.&lt;/p&gt;

&lt;h4 id=&#34;the-hub:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;The Hub&lt;/h4&gt;

&lt;p&gt;Now we can add a Hub Class from the conect menu in Visual Studio, because we already added the references manually:
Right click your project &amp;gt; Add &amp;gt; Signal Hub Class (v2). If it isn&amp;rsquo;t there just select Add New Item and search for it.
Name it MessageHub.cs&lt;/p&gt;

&lt;p&gt;Replace the content of the file with this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;System&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;System.Collections.Generic&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;System.Linq&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;System.Web&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;Microsoft.AspNet.SignalR&lt;/span&gt;;

    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ChatWebApp&lt;/span&gt;
    {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;MessageHub&lt;/span&gt; : Hub
        {
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;Login&lt;/span&gt;(&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; username)
            {
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Notify all clients that a user is logged in&lt;/span&gt;
                Clients.All.userLoggedIn(username);
            }

            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;SendMessage&lt;/span&gt;(&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; sender, &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; message)
            {
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Display the new message by calling displayMessage on all connected clients&lt;/span&gt;
                Clients.All.displayMessage(sender, message);
            }
        }
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Here we are adding a method used to &amp;ldquo;log in&amp;rdquo; to our Chat App and a method to send messages.
It should be pretty self explanotory but what we are doing is telling all clients that either a usre has logged in or to display a message.
The userLoggedIn(username) and displayMessage(sender, message) methods are implemented in JavaScript in just a moment.&lt;/p&gt;

&lt;p&gt;For further information about the workings of the Hub, please go to:
&lt;a href=&#34;http://www.asp.net/signalr/overview/signalr-20/hubs-api/hubs-api-guide-server&#34;&gt;http://www.asp.net/signalr/overview/signalr-20/hubs-api/hubs-api-guide-server&lt;/a&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- ResponsiveHeader --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-5807169669170468&#34;
     data-ad-slot=&#34;5652122954&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;h4 id=&#34;the-messenger-javascript:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;The Messenger JavaScript&lt;/h4&gt;

&lt;p&gt;Now we have all the C# code we need and can go on to the client side JavaScript.
Add a new JavaScript file, Add &amp;gt; Add New Item &amp;gt; JavaScript and name it MessengerScript.js&lt;/p&gt;

&lt;p&gt;Replace the content of the file with this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	$(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; () {
	    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; username &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; getUrlVars()[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;];
	
	    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Enable logging for development purpose&lt;/span&gt;
	    $.connection.hub.logging &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;true&lt;/span&gt;;
	    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Declare a proxy to reference the hub.&lt;/span&gt;
	    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; messageHub &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; $.connection.messageHub;
	    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Create a function that the hub can call to broadcast messages.&lt;/span&gt;
	    messageHub.client.displayMessage &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; (sender, message) {
	        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Wrap the sender and the message in HTML&lt;/span&gt;
	        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; senderDiv &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; $(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;lt;div /&amp;gt;&amp;#39;&lt;/span&gt;).text(sender).html();
	        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; messageDiv &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; $(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;lt;div /&amp;gt;&amp;#39;&lt;/span&gt;).text(message).html();
	        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Add the message to the page.&lt;/span&gt;
	        $(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;#messagelist&amp;#39;&lt;/span&gt;).append(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; senderDiv
	            &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;lt;/strong&amp;gt;:  &amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; messageDiv &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;lt;/li&amp;gt;&amp;#39;&lt;/span&gt;);
	    };
	    
	    $.connection.hub.start(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;~/signalr&amp;quot;&lt;/span&gt;).done(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; () {
	       
	        messageHub.server.login(username);
	
	        $(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;#sendmessage&amp;#39;&lt;/span&gt;).click(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; () {
	            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; msg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; $(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;#message&amp;quot;&lt;/span&gt;).val();
	            messageHub.server.sendMessage(username, msg);
	            &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Clear text box and reset focus for next comment.&lt;/span&gt;
	            $(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;#message&amp;#39;&lt;/span&gt;).val(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;).focus();
	        });
	    });
	});
	
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; getUrlVars() {
	    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; vars &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; [], hash;
	    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; hashes &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;window&lt;/span&gt;.location.href.slice(&lt;span style=&#34;color: #007020&#34;&gt;window&lt;/span&gt;.location.href.indexOf(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;).split(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;);
	    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; hashes.length; i&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;) {
	        hash &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hashes[i].split(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;);
	        vars.push(hash[&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;]);
	        vars[hash[&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hash[&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;];
	    }
	    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; vars;
	}
	
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now a brief note; this is actually the first JavaScript code I have written, so there might be better ways to implement the above, but it works, and the purpose of this tutorial is to show how to use SignalR - not how JavaScript should be written, so bear with me, please :)&lt;/p&gt;

&lt;p&gt;The first part gets the username from a query parameter by calling the last function in the script the getUrlVars (copy pasted somewhere from StackOverflow, can&amp;rsquo;t remember where I found it thou).
Then we enable logging in the SignalR connection, get a reference to the MessageHub class that we just implemented, and now some of the &amp;ldquo;magic&amp;rdquo;: &lt;strong&gt;implementing the displayMessage method&lt;/strong&gt; as we are going to invoke from our MessageHub. The displayMessage is basically wrapping the sender and message in some HTML and added a li to a ul declared in a HTML file we will create in the next step.&lt;/p&gt;

&lt;p&gt;We need to declare the displayMessage method before connecting to the hub so now that this is done we start a connection to the hub and gives it the path as we used in the Startup.cs. Then, when the connection is done we are calling login on the hub and last but not least &lt;strong&gt;implementing the sendMessage method&lt;/strong&gt; which gets the message from a input box (which we also will implement in a HTML file in a moment) and then we call the SendMessage method on the hub.&lt;/p&gt;

&lt;h4 id=&#34;the-html-page:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;The HTML Page&lt;/h4&gt;

&lt;p&gt;Next we add the HTML page which the user sees. Add &amp;gt; New Item &amp;gt; HTML Page. Name it Messenger.html
Replace the content of the file with this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #007020&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;html&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
	    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;ChatWebApp&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
	    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
	        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;script&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;src=&amp;quot;Scripts/jquery-1.6.4.js&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;script&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;src=&amp;quot;Scripts/jquery.signalR-2.1.0.js&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;script&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;src=&amp;quot;~/signalr/hub&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;script&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;src=&amp;quot;Scripts/MessengerScript.js&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;input&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;id=&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
	        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;input&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;id=&amp;quot;sendmessage&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;Send&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
	        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ul&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;id=&amp;quot;messagelist&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
	            
	        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
	    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now the most important path here, are:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;script&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;src=&amp;quot;~/signalr/hub&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Visual Studio will complain about this, because we have no script in the path, but this is because the script is generated by SignalR on runtime and we are just telling where it can be found.
Besides we have the elements used to interact with our system.&lt;/p&gt;

&lt;p&gt;With this in place, you can run your new application and test it in your browser, before continuing to the next part, where we will deploy to IIS.&lt;/p&gt;

&lt;h4 id=&#34;a-note-on-debugging-in-vs:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;A note on debugging in VS&lt;/h4&gt;

&lt;p&gt;I have experienced a lot of difficulties while debugging/running my SignalR apps in Visual Studio 2013. Sometimes, when I reopen a solution that previously &amp;ldquo;just worked&amp;rdquo;, it all of the sudden don&amp;rsquo;t anymore, meaning that the ~/signalr/js gives a 404 on localhost or the client can not be found.
A fix for this seems to be restarting VS, restarting the IIS Express by right clicking on the tray icon:
&lt;img src=&#34;http://systemout.net/images/IISExpress.png&#34; alt=&#34;&#34; /&gt;

&amp;hellip;or simply just hitting my screen, going for some coffee and when returning, it magically just works.&lt;/p&gt;

&lt;h3 id=&#34;deploying-the-signalr-app-to-iis:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;Deploying the SignalR App to IIS&lt;/h3&gt;

&lt;p&gt;We use Visual Studio to publish the site. Right-click your project, select Publish
In the dialog click the Custom option as publish target and give it a name.
Select File System in the next drop down and enter a location for the published files.
In settings you can choose to precompile your source files, if you want to, just expand the File Publish Options and check the according box.&lt;/p&gt;

&lt;p&gt;Click Publish.&lt;/p&gt;

&lt;p&gt;Now we that we have our files ready, we need to make the IIS ready for hosting our App.&lt;/p&gt;

&lt;p&gt;On your server, create the folder C:\wwwroot\ChatWebApp (or anywhere else you like).
Copy the contents from the Publish folder (on your dev pc) where Visual Studio published the files to into C:\wwwroot\ChatWebApp on IIS.
On your server open IIS Manager, expand Default Website. If your new folder is in the tree view right click and select Refresh.
Select the ChatWebApp folder, right click and select Convert to Application.&lt;/p&gt;

&lt;p&gt;Now on your server go to &lt;a href=&#34;http://localhost/ChatWebApp/Messenger.html?username=MySuperDupperUser&#34;&gt;http://localhost/ChatWebApp/Messenger.html?username=MySuperDupperUser&lt;/a&gt; and watch the magic!&lt;/p&gt;

&lt;p&gt;You can download the complete solution right here: &lt;a href=&#34;http://1drv.ms/1wB5IWF&#34;&gt;http://1drv.ms/1wB5IWF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have in problems, or comments, let me know.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE&lt;/em&gt;: I have posted &lt;a href=&#34;http://systemout.net/2015/06/10/developing-a-who-is-on-chat-web-app-using-signalr-and-wpf/&#34;&gt;a new tutorial&lt;/a&gt; showing how it is possible to let the clients see who is online. That post builds on this tutorial, so check it out after you have read this one!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SignalR Hub Reference - done right!</title>
      <link>http://systemout.net/2014/07/15/signalr-hub-reference-done-right/</link>
      <pubDate>Tue, 15 Jul 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2014/07/15/signalr-hub-reference-done-right/</guid>
      <description>

&lt;p&gt;UPDATE: I have now written a complete SignalR tutorial, see this post: &lt;a href=&#34;http://systemout.net/2014/07/17/developing-and-deploying-a-signalr-chat-web-app-to-iis/&#34;&gt;http://systemout.net/2014/07/17/developing-and-deploying-a-signalr-chat-web-app-to-iis/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SignalR is nice. No doubt about that. But it is very much immature, not the framework, more the tutorials, guidelines, etc.&lt;/p&gt;

&lt;p&gt;I have been strugling a bit with the Javascript/client setup of the hub connection - especially when deploying to an IIS 8 in production, where all the magic stopped to happen. There is not much to gain from WebSockets, if the connection can&amp;rsquo;t be opened because the scripts won&amp;rsquo;t load.&lt;/p&gt;

&lt;p&gt;Any way, in an ASP.NET Web Application using SignalR with a generated hub proxy you need the following things to be able to make the connection:
OWIN Startup.cs (Add &amp;gt; New Item &amp;gt; Owin Startup):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Microsoft.AspNet.SignalR;
using Microsoft.Owin;
using Owin;

[assembly: OwinStartup(typeof(SystemOut.Gateway.WebApp.Startup))]

namespace SystemOut.Gateway.WebApp
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            // For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=316888
            app.MapSignalR(&amp;quot;/~/signalr&amp;quot;, new HubConfiguration());
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NOTICE&lt;/strong&gt; the &amp;ldquo;/~/signalr - this is needed, if you, as I, are running the site in your production environment as a sub directory for the main site.&lt;/p&gt;

&lt;p&gt;Because of this, you need to reference the generated SignalR proxy a little different than most samples I came across do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;~/signalr/js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You also need to create the hub connection a little bit different, in your scripts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.connection.hub.start(&amp;quot;~/signalr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That should do it!&lt;/p&gt;

&lt;p&gt;Remember, you can always enable logging to the browsers console (F12) by adding this line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.connection.hub.logging = true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;just before:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.connection.hub.start(&amp;quot;~/signalr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-trouble:8ee58b73c21ae6829694450168d54780&#34;&gt;The trouble&lt;/h4&gt;

&lt;p&gt;Before settings things up this way, I received a &amp;ldquo;Unable to get property &amp;lsquo;client&amp;rsquo; of undefined or null reference&amp;rdquo; in the IE console when loading the page. In that case, the &amp;ldquo;client&amp;rdquo; referenced was the SignalR client in the Hub.
I investigated it further by looking in Fiddler and in Chrome. In the console in Chrome I got &amp;ldquo;&lt;a href=&#34;http://myip/signalr/js&#34;&gt;http://myip/signalr/js&lt;/a&gt; 404 (Not Found)&amp;rdquo; which lead me to come up with the above solution, becuase I only had the problem when deploying the application to IIS - not when I ran it locally from Visual Studio 2013.&lt;/p&gt;

&lt;p&gt;As an end note; it makes no difference for me whether I use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/signalr/js 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/signalr/hubs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it for now. I&amp;rsquo;m working on a full tutorial to developing AND deploying an ASP.NET Web Application with SignalR, so check back soon! :)&lt;/p&gt;

&lt;p&gt;UPDATE: I have now written a complete SignalR tutorial, see this post: &lt;a href=&#34;http://systemout.net/2014/07/17/developing-and-deploying-a-signalr-chat-web-app-to-iis/&#34;&gt;http://systemout.net/2014/07/17/developing-and-deploying-a-signalr-chat-web-app-to-iis/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>