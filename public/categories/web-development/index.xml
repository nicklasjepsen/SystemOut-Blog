<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web Development on SystemOut</title>
    <link>http://localhost:1313/categories/web-development/</link>
    <description>Recent content in Web Development on SystemOut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>nmj@systemout.net (Nicklas Møller Jepsen)</managingEditor>
    <webMaster>nmj@systemout.net (Nicklas Møller Jepsen)</webMaster>
    <lastBuildDate>Thu, 18 Dec 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/web-development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to build and deploy octopress with a single click, part 1</title>
      <link>http://localhost:1313/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p1</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://localhost:1313/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p1</guid>
      <description>

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;
It is no longer required to use Ruby 1.9.3 with Octopress so the post has been updated accordingly.
Also, installation instructions for Python is added because this is required for the build process to work.&lt;/p&gt;

&lt;h2 id=&#34;introduction:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this guide I will guide you to how you can build and deploy your Octopress site with a single mouse click. That is; building Octopress on your Windows computer and deploying the generated site to your web server, for example a Raspberry Pi!
To accomplish this, we will be using Ruby, rake and WinSCP and deploying it using FTP.&lt;/p&gt;

&lt;p&gt;This blog, &lt;a href=&#34;http://systemout.net&#34; title=&#34;SystemOut.net&#34;&gt;Systemout.net&lt;/a&gt;, started out just being generated on the web server/the Pi, but the Pi is not exactly made for CPU intensive work and therefore I got a little tied of waiting for even the smallest changes made to the blog to be generated.
I&amp;rsquo;m sure you know this, but Octopress needs to regenerate the entire site, primarily to keep all links inbetween the various post valid, even if something is changed. This is the disadvantage of having a static site as your blog, BUT once the generation/build/deployment process is over, you can enjoy the benefits of a static blog: Speed, simplicity, etc.&lt;/p&gt;

&lt;h2 id=&#34;steps:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Steps&lt;/h2&gt;

&lt;p&gt;There are a few steps required before you can use your Windows box to build and host Octopress on it.
But don&amp;rsquo;t worry: If you follow this guide, it will be a peace of cake!
The steps required are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#ruby&#34;&gt;Install Ruby and the Ruby SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tortoise&#34;&gt;Install Tortoise Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clone&#34;&gt;Clone Octopress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;generate&#34;&gt;Generate your Octopress site and preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deploy&#34;&gt;Deploy&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;installing-ruby-and-the-ruby-sdk-on-windows-a-name-ruby-a:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Installing Ruby and the Ruby SDK on Windows&lt;a name=&#34;ruby&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;You can find the various Ruby downloads &lt;a href=&#34;http://rubyinstaller.org/downloads/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.2.2.exe&#34;&gt;And here is a direct download link for Ruby 2.2.2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For Ruby version 2.2.2 we need the mingw64-32-4.7.2 of the Ruby SDK. This can be found &lt;a href=&#34;http://dl.bintray.com/oneclick/rubyinstaller/DevKit-mingw64-32-4.7.2-20130224-1151-sfx.exe&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We need to make some manual changes for the Ruby SDK to function properbly. Open a command prompt and cd to the location where you extracted the Ruby SDK, let&amp;rsquo;s say it is in C:\RubySdk and run the following 3 commands:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    C:\RubySdk&amp;gt;devkitvars.bat
    C:\RubySdk&amp;gt;ruby dk.rb init
    C:\RubySdk&amp;gt;ruby dk.rb install
&lt;/pre&gt;&lt;/div&gt;

Lastly we can test to see that the correct version of Ruby is installed by running:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	C:\&amp;gt;ruby --version
&lt;/pre&gt;&lt;/div&gt;

which should give us something like:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	ruby &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color: #40a070&#34;&gt;9&lt;/span&gt;.&lt;span style=&#34;color: #40a070&#34;&gt;3&lt;/span&gt;p&lt;span style=&#34;color: #40a070&#34;&gt;551&lt;/span&gt; (&lt;span style=&#34;color: #40a070&#34;&gt;2014-11-13&lt;/span&gt;) [i&lt;span style=&#34;color: #40a070&#34;&gt;386&lt;/span&gt;-mingw&lt;span style=&#34;color: #40a070&#34;&gt;32&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;

&amp;hellip;and that&amp;rsquo;s it for the Ruby installation!&lt;/p&gt;

&lt;h3 id=&#34;install-python:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Install Python&lt;/h3&gt;

&lt;p&gt;Pretty simple: Go to &lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;the official site&lt;/a&gt; to get the latest installer and install it.&lt;/p&gt;

&lt;h3 id=&#34;install-tortoise-git-a-name-tortoise-a:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Install Tortoise Git&lt;a name=&#34;tortoise&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This step is pretty straight forward; simply download and install the Tortoise Git client from &lt;a href=&#34;https://code.google.com/p/tortoisegit/wiki/Download&#34;&gt;here&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&#34;clone-octopress-a-name-clone-a:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Clone Octopress&lt;a name=&#34;clone&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Now we&amp;rsquo;re setup and ready the start with the fun stuf!&lt;/p&gt;

&lt;p&gt;Open a command prompt, cd to the directory where you want your Octopress cloned into and run:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    git clone git://github.com/imathis/octopress.git octopress
&lt;/pre&gt;&lt;/div&gt;

Now cd to the octopress dir and install some gems:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;cd&lt;/span&gt; octopress
	gem install bundler
	bundle install
&lt;/pre&gt;&lt;/div&gt;

&lt;strong&gt;Note:&lt;/strong&gt; If you get an error like:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	Gem&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;::RemoteFetcher::FetchError: SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B:certificate verify failed (https://rubygems.org/gems/listen-2.8.4.gem)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Then you need to change the URL of the rubygems location. This is done in the Gemfile. The Gemfile is located in the Octopress directory as you just cloned from Git and &lt;strong&gt;after&lt;/strong&gt; correction it should look like:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	source &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;http://rubygems.org&amp;quot;&lt;/span&gt;

	group &lt;span style=&#34;color: #517918&#34;&gt;:development&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;do&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;rake&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 10.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 2.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;octopress-hooks&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 2.2&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;octopress-date-format&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 2.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;jekyll-sitemap&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;rdiscount&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 2.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;RedCloth&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 4.2.9&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;haml&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 4.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;compass&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 0.12.2&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;sass-globbing&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 1.0.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;rubypants&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 0.2.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;rb-fsevent&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 0.9&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;stringex&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 1.4.0&amp;#39;&lt;/span&gt;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;end&lt;/span&gt;

	gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 1.4.2&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Save the Gemfile and rerun the command
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	bundle install
&lt;/pre&gt;&lt;/div&gt;

Finally we need to run this command:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	rake install
&lt;/pre&gt;&lt;/div&gt;

And that&amp;rsquo;s it - now Ruby is installed, Octopress is cloned and ready to be generated!&lt;/p&gt;

&lt;h3 id=&#34;generate-your-octopress-site-and-preview-a-name-generate-a:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Generate your Octopress site and preview&lt;a name=&#34;generate&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Now we need to build our Octopress site using the generate command:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	rake generate
&lt;/pre&gt;&lt;/div&gt;

This should take no time and now we can start a web server for previewing the generated site:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	rake preview
&lt;/pre&gt;&lt;/div&gt;

Now browse to &lt;a href=&#34;http://localhost:4000&#34;&gt;localhost:4000&lt;/a&gt; - and you should see you new Octopress site! :)&lt;/p&gt;

&lt;h3 id=&#34;deploying-to-you-web-server-a-name-deploy-a:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Deploying to you web server&lt;a name=&#34;deploy&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;You could of course just keep you blog hosted on localhost:4000, but what&amp;rsquo;s the fun in that?
No where - therefore I&amp;rsquo;m going to show you how to deploy the generated blog to you Raspberry Pi or other web server using a little bit of command line magic combined with WinSCP and FTP. There are some steps involved in this so I wrote another blog post of how to do that. You can find the post &lt;a href=&#34;http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p2/&#34;&gt;right here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it! Feel free to leave any comments/ask questions in the comment fields below.&lt;/p&gt;

&lt;p&gt;Thanks for reading :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to build and deploy octopress with a single click, part 2 </title>
      <link>http://localhost:1313/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p2</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://localhost:1313/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p2</guid>
      <description>

&lt;h2 id=&#34;introduction:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post is a continuation of the post about generating an Octopress site on a Windows machine and deploying it to a web server/Raspberry Pi.
You can find the post about setting up your Windows dev box to generate the Octopress site &lt;a href=&#34;http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p1/&#34;&gt;right here&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&#34;steps:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Steps&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#winscp&#34;&gt;Donwload and install WinSCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ftp&#34;&gt;Enable FTP on the Raspberry Pi/web server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#winscpscript&#34;&gt;Create WinSCP script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deploy&#34;&gt;Create build and deployment script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#run&#34;&gt;Run!&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;download-and-install-winscp-a-name-winscp-a:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Download and install WinSCP&lt;a name=&#34;winscp&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;You can grab the latest version of WinSCP from &lt;a href=&#34;http://winscp.net/eng/download.php&#34;&gt;here&lt;/a&gt;.
Just follow the installation instructions and you are done!&lt;/p&gt;

&lt;h3 id=&#34;enable-ftp-on-the-raspberry-pi-web-server-a-name-ftp-a:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Enable FTP on the Raspberry Pi/web server&lt;a name=&#34;ftp&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I use &lt;a href=&#34;http://www.proftpd.org/&#34;&gt;ProFTPD&lt;/a&gt; as my FTP server on the Raspberry Pi running Raspbian. On Raspbian/Debian it can be installed like this:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	apt-get install proftpd
&lt;/pre&gt;&lt;/div&gt;

Choose the standalone option when prompted.
After installation is completed, the FTP server should be running.
If you for some reason need to, you can stop/start the FTP server as follows:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	/etc/init.d/proftpd stop
	/etc/init.d/proftpd start
&lt;/pre&gt;&lt;/div&gt;

Now that&amp;rsquo;s up and running, we need to create a WinSCP script to upload the generated files.&lt;/p&gt;

&lt;h3 id=&#34;create-winscp-script-a-name-winscpscript-a:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Create WinSCP script&lt;a name=&#34;winscpscript&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Besides being a gui tool for file handling, WinSCP comes with a command line interface. Refer to the documentation &lt;a href=&#34;http://winscp.net/eng/docs/scriptcommand_synchronize&#34;&gt;here&lt;/a&gt; if you need further information.&lt;/p&gt;

&lt;p&gt;Create a new text file, name it winscpscript.scp and place it in octopress\scripts (create the scripts folder, if it doesn&amp;rsquo;t exist) and insert the following code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	option batch abort
	option confirm &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;off&lt;/span&gt;
	open username:password@ipOrHostOfWebserver
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;cd&lt;/span&gt; /srv/www/octopress
	lcd C:\octopress\public\
	synchronize remote -delete
	exit
&lt;/pre&gt;&lt;/div&gt;

In this script, the following happens:
The first 2 lines ensures that prompts are answered negativly and that confirmations are turned of.&lt;/p&gt;

&lt;p&gt;The open command connects to the FTP server using the provided username/password on the hostname or ip address of you web server.&lt;/p&gt;

&lt;p&gt;After that we change the remote directory (the directory on the server), using the cd command, to a suitable place to store our web site.&lt;/p&gt;

&lt;p&gt;Then we use the lcd command to change the local directory to the location on the Windows computer where Octopress is installed/generated. Remember that the output of the generation is in the &amp;lsquo;public&amp;rsquo; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now the magic!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using the syncrhonize command we can sync the files in the local directory with the remote directory. The remote option tells WinSCP that it is the remote directory that shall be updated with changes from the local directory. By adding the -delete option, we tell WinSCP that the synchronization should make sure that locally deleted files also gets deleted from the remote directory.&lt;/p&gt;

&lt;p&gt;Lastly we simply exit the WinSCP CLI and returning control to the caller.&lt;/p&gt;

&lt;h3 id=&#34;create-build-and-deployment-script-a-name-deploy-a:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Create build and deployment script&lt;a name=&#34;deploy&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Now we can create the build script that will enable us to build/generate and publish our Octopress site with one single click.&lt;/p&gt;

&lt;p&gt;Create new text file, name it BuildOctopress.bat and save it in octopress\scripts with the following content:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;C:\octopress\&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;call&lt;/span&gt; rake generate || true
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;C:\Program Files (x86)\WinSCP\&amp;quot;&lt;/span&gt;
	winscp /script=C:\octopress\scripts\winscpscript.scp
&lt;/pre&gt;&lt;/div&gt;

Now here is what happens in the script:&lt;/p&gt;

&lt;p&gt;First we change working directory to the location of out octopress site.&lt;/p&gt;

&lt;p&gt;Then we generate the site using rake generate. The call function is handy, because we&amp;rsquo;re calling another batch job.&lt;/p&gt;

&lt;p&gt;Now cd to the WinSCP directory.&lt;/p&gt;

&lt;p&gt;Run WinSCP and pass the script we created in the previous step.&lt;/p&gt;

&lt;p&gt;Save the file and continue to the next step.&lt;/p&gt;

&lt;h3 id=&#34;run-a-name-run-a:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Run&lt;a name=&#34;run&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;After all the above is done, we are now able to build and deploy out Octopress site by the single click of a mouse. Simply run the BuildOctopress.bat file and wait for it to finish.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it. Please feel free to leave any comments and/or questions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Calling SignalR Hub from a C# WCF Service</title>
      <link>http://localhost:1313/2014/07/25/calling-signalr-hub-from-a-csharp-wcf-service</link>
      <pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://localhost:1313/2014/07/25/calling-signalr-hub-from-a-csharp-wcf-service</guid>
      <description>

&lt;h2 id=&#34;introduction:1c0b33ef5ca6cf9a2ff28d934b29da72&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: See all my SignalR tutorials &lt;a href=&#34;http://systemout.net/categories/signalr/&#34;&gt;right here&lt;/a&gt; or find a post about how to list users that are connected &lt;a href=&#34;http://systemout.net/2015/06/10/developing-a-who-is-on-chat-web-app-using-signalr-and-wpf/&#34;&gt;right here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Download the source for this tutorial here: &lt;a href=&#34;http://1drv.ms/1qEpMtQ&#34;&gt;http://1drv.ms/1qEpMtQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a previous blog post I wrote a tutorial on how to develop and deploy a simple SignalR chat application using the bare minimum as a proof of concept. You can find that post right here: &lt;a href=&#34;http://systemout.net/2014/07/17/developing-and-deploying-a-signalr-chat-web-app-to-iis/&#34;&gt;http://systemout.net/2014/07/17/developing-and-deploying-a-signalr-chat-web-app-to-iis/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial, we are going to make a WCF service that can talk to the SignalR chat app and broadcast messages from &amp;ldquo;the system&amp;rdquo; - not by a user.
SignalR is easy to use with JavaScript, but if you need to broadcast messages to the SignalR hub, you need to use a browser (JavaScript) or otherwise things get a little more complicated.
This tutorial, will guide you to calling SignalR hub methods from a WCF service that recides in a different DLL than the SignalR host.&lt;/p&gt;

&lt;h3 id=&#34;setup:1c0b33ef5ca6cf9a2ff28d934b29da72&#34;&gt;Setup&lt;/h3&gt;

&lt;p&gt;This tutorial uses the Chat web app as implemented in the previous mention blog post, you can find the solution from that post rigth here: &lt;a href=&#34;http://1drv.ms/1wB5IWF&#34;&gt;http://1drv.ms/1wB5IWF&lt;/a&gt;
Oh, and if you want to see the app in action, you can try it out right here: &lt;a href=&#34;http://systemout.net:56677/ChatWebApp/Messenger.html?username=User1&#34;&gt;http://systemout.net:56677/ChatWebApp/Messenger.html?username=User1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are going to add a WCF service to the ChatWebApp solution and provide functionality that allows the WCF service to invoke methods on the SignalR hub.&lt;/p&gt;

&lt;h3 id=&#34;creating-the-wcf-service:1c0b33ef5ca6cf9a2ff28d934b29da72&#34;&gt;Creating the WCF Service&lt;/h3&gt;

&lt;p&gt;Open up the ChatWebApp solution.
Add a WCF Service Application, name it WcfService:
&lt;img src=&#34;http://systemout.net/images/SignalRCreateWcfServiceProject.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Now add the SignalR depencies, right click References &amp;gt; Manage NuGet Packages &amp;gt; Search for SignalR &amp;gt; Install &lt;strong&gt;Microsoft ASP.NET SignalR .NET Client&lt;/strong&gt; and &lt;strong&gt;Microsoft ASP.NET SignalR Core Components&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We also need a reference to the ChatWebApp project, so if you are not building on the ChatWebApp project which you can download in the top of this post, you need to write your own Hub class. But, for this tutorial we are using the ChatWebApp, so add a reference to that project.&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- ResponsiveHeader --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-5807169669170468&#34;
     data-ad-slot=&#34;5652122954&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;p&gt;VS have created the basic files needed to host the WCF Service but I have renamed the IService1.cs and Service1.cs to ISystemService.cs and SystemService.
Replace the code in &lt;strong&gt;SystemService.cs&lt;/strong&gt; with:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;SystemService&lt;/span&gt; : ISystemService
    {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;readonly&lt;/span&gt; IHubProxy messageHub;

        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;SystemService&lt;/span&gt;()
        {
            &lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; connection = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; HubConnection(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;http://localhost:yourport/~/&amp;quot;&lt;/span&gt;);
            messageHub = connection.CreateHubProxy(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;MessageHub&amp;quot;&lt;/span&gt;);
            connection.Start().Wait();
        }

        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;SendMessage&lt;/span&gt;(&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; sender, &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; message)
        {
            messageHub.Invoke(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;SendMessage&amp;quot;&lt;/span&gt;, sender, message);
        }
    }
&lt;/pre&gt;&lt;/div&gt;

In the constructor of the service were a making a connection to the hub and creating a proxy for the MessageHub in the ChatWebApp project and last we are starting the connection.
Maybe you don&amp;rsquo;t need the ~ at the end of the hub connection URL, but again, if working on the ChatWebApp you do.&lt;/p&gt;

&lt;p&gt;The service publishes one operation: SendMessage. I don&amp;rsquo;t think further introduction to the workings are required, &lt;strong&gt;but&lt;/strong&gt; it is important the the method we are invoking on the hub is written exactly as it is named in the hub.&lt;/p&gt;

&lt;p&gt;Now to the interface; replace the code in the ISystemService.cs whit this:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #4070a0&#34;&gt;    [ServiceContract]&lt;/span&gt;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;interface&lt;/span&gt; ISystemService
    {
&lt;span style=&#34;color: #4070a0&#34;&gt;        [OperationContract]&lt;/span&gt;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;SendMessage&lt;/span&gt;(&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; sender, &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; message);
    }
&lt;/pre&gt;&lt;/div&gt;

And that&amp;rsquo;s it! We are ready to run the service.
Mark the SystemService.cs file and hit F5 to bring up the WCF Test Client GUI the Visual Studio provides where you can invoke the SendMessage operation.&lt;/p&gt;

&lt;p&gt;If you want, you can try to connect to the ChatWebApp that I have running, simply create the hub connection like so:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	&lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; connection = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; HubConnection(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;http://systemout.net:56677/ChatWebApp/~/&amp;quot;&lt;/span&gt;);
&lt;/pre&gt;&lt;/div&gt;

Then you can go to:&lt;a href=&#34;http://systemout.net:56677/ChatWebApp/Messenger.html?username=user1&#34; target=&#34;_blank&#34;&gt; my demo site&lt;/a&gt; and see that the messages you send from your WCF service are send all the way to my server in Denmark and back to your browser :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://systemout.net/images/ChromeExample.png&#34; alt=&#34;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;You can download the updated solution including the WCF service here: &lt;a href=&#34;http://1drv.ms/1qEpMtQ&#34;&gt;http://1drv.ms/1qEpMtQ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;http://systemout.net/2015/06/10/developing-a-who-is-on-chat-web-app-using-signalr-and-wpf/&#34;&gt;You can find my new post about how to create a &amp;ldquo;Who Is On&amp;rdquo; SignalR service right here!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How To Setup Octopress for Jekyll on a Raspberry Pi</title>
      <link>http://localhost:1313/2014/07/20/how-to-setup-octopress-for-jekyll-on-a-raspberry-pi/</link>
      <pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://localhost:1313/2014/07/20/how-to-setup-octopress-for-jekyll-on-a-raspberry-pi/</guid>
      <description>

&lt;h3 id=&#34;introduction:68e5c07e240ab8ba63c1b33cbb305bb3&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;There are several things we need to take care of to make a successful installation of Octopress on the Pi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prepare the Raspbian for web hosting&lt;/li&gt;
&lt;li&gt;Install NGINX&lt;/li&gt;
&lt;li&gt;Install Git&lt;/li&gt;
&lt;li&gt;Install Curl&lt;/li&gt;
&lt;li&gt;Install RVM (Ruby Version Manager) and Ruby&lt;/li&gt;
&lt;li&gt;Finally install Octopress&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But don&amp;rsquo;t worry - all of the above is quite straight forward, although the Ruby installation might take some time.&lt;/p&gt;

&lt;h4 id=&#34;preparing-raspbian:68e5c07e240ab8ba63c1b33cbb305bb3&#34;&gt;Preparing Raspbian&lt;/h4&gt;

&lt;p&gt;First of you need a running Raspbian installation. The easiest way to get this, is by downloading it from &lt;a href=&#34;http://www.raspberrypi.org/downloads/&#34;&gt;http://www.raspberrypi.org/downloads/&lt;/a&gt;.
Follow the official instructions to get up and running.&lt;/p&gt;

&lt;p&gt;This tutorial will use the terminal/SSH from a remote computer and therefore we need to make sure we can reach it over the network.
To find the Pi&amp;rsquo;s current IP write this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ifconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my case I got a eth0 inet addr:192.168.X.YYY
When using the Pi as a web server it is a good idea to give it a static IP address. I have an DHCP server where this is handled, but if you want to set up a static IP on the Pi, here is how it is done: &lt;a href=&#34;https://wiki.debian.org/NetworkConfiguration#Configuring_the_interface_manually&#34;&gt;https://wiki.debian.org/NetworkConfiguration#Configuring_the_interface_manually&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can disconnect the screen and go back to our main desktop. I use Windows and therefore Putty (&lt;a href=&#34;http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe&#34;&gt;http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe&lt;/a&gt;) to connect to Pi.&lt;/p&gt;

&lt;p&gt;I also like to give my computers a decent name (Raspbian sets the hostname to raspberrypi).
To change the hostname do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo namo /etc/hostname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the name to whatever you like and hit Ctrl+X, answer Y and the Enter to overwrite the file.
Now we need to update the hosts file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nano /etc/hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace raspberrypi with the new hostname you provided in the previous step and hit Ctrl+X, answer Y and the Enter to overwrite the file.
Reboot the Pi:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For further info on changing the hostname of see: &lt;a href=&#34;https://wiki.debian.org/HowTo/ChangeHostname&#34;&gt;https://wiki.debian.org/HowTo/ChangeHostname&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that Raspbian is installed and we have access to the Pi from SSH/Putty we need to make sure it is up to date by first collecting available updates and then upgrade/install them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install update
sudo apt-get install upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;install-nginx-curl-git-and-ruby:68e5c07e240ab8ba63c1b33cbb305bb3&#34;&gt;Install NGINX, Curl, Git and Ruby&lt;/h3&gt;

&lt;p&gt;First things first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install nginx git curl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With my Raspbian install I actually only needed to install NGINX, but just run the above to be sure to have what wee need, no damage done.&lt;/p&gt;

&lt;p&gt;No RVM and Ruby:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\curl -L https://get.rvm.io | bash -s stable --ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;to get the latest stable RVM.
This process takes some time, on my Pi it took about &lt;strong&gt;1 and  a half hour&lt;/strong&gt;, so go watch some Simpsons. :)&lt;/p&gt;

&lt;p&gt;To start using RVM you need to run the command the installer tells you to or simply reconnect to the terminal.&lt;/p&gt;

&lt;p&gt;According to the Octopress docs, &lt;a href=&#34;http://octopress.org/docs/setup/rvm/&#34;&gt;http://octopress.org/docs/setup/rvm/&lt;/a&gt;, we need Ruby version 1.9.3.
Therefore we do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm install 1.9.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command also took an hour or so on my Pi, but the rest should be easyly done.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm use 1.9.3
rvm rubygems latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now check the the correct Ruby version is used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby --version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should display 1.9.3-something.&lt;/p&gt;

&lt;h3 id=&#34;installing-octopress:68e5c07e240ab8ba63c1b33cbb305bb3&#34;&gt;Installing Octopress&lt;/h3&gt;

&lt;p&gt;To install Octopress from Git run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://github.com/imathis/octopress.git octopress
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;where the last option &amp;lsquo;octopress&amp;rsquo; is the name of the site/directory for your Octopress installation. I name mine according to the site I&amp;rsquo;m going to host.&lt;/p&gt;

&lt;p&gt;Now we need to install Octopress&amp;rsquo; dependencies.
Browse to the name of the directory which you specified in the git command, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd octopress
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install bundler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and lastly&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install the default Octopress theme:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rake install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setting-up-nginx:68e5c07e240ab8ba63c1b33cbb305bb3&#34;&gt;Setting up NGINX&lt;/h3&gt;

&lt;p&gt;NGINX has a folder where it stores configuration for different sites.
We use nano to create a new configuration file for our site:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nano /etc/nginx/sites-available/DOMAIN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then copy the following into the new file, remeber to change IPOFTHEPI and DOMAIN with your values. Also, if you gave another name for your Octopress installation in previeus steps, change the path in the location accordingly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
    listen IPOFTHEPI:80;
    server_name DOMAIN;

        location / {
            root /home/pi/octopress/public;
            index index.html index.htm;
            access_log /home/pi/octopress/source/YOURDOMAIN.access.log;
            error_log /home/pi/octopress/source/YOURDOMAIN.error.log;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the new file.&lt;/p&gt;

&lt;p&gt;Create a link from the created file to the NGINX enabled sites directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /etc/nginx/sites-enabled
ln -s /etc/nginx/sites-available/DOMAIN /etc/nginx/sites-enabled/DOMAIN
ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart NGINX:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/init.d/nginx restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;Now all theres left to be done, is setting up your blog/site by following the guidelines on the official Octopress web site: &lt;a href=&#34;http://octopress.org/&#34;&gt;http://octopress.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to ease the generation and deployment process, you can build the blog on your windows machine and deploy it to the Raspberry Pi in a single click. Learn how to set this up by reading my guide here: &lt;a href=&#34;http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p1/&#34;&gt;http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p1/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Developing and Deploying a SignalR Chat Web App to IIS</title>
      <link>http://localhost:1313/2014/07/17/developing-and-deploying-a-signalr-chat-web-app-to-iis/</link>
      <pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://localhost:1313/2014/07/17/developing-and-deploying-a-signalr-chat-web-app-to-iis/</guid>
      <description>

&lt;h2 id=&#34;introduction:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Download the complete solution: &lt;a href=&#34;http://1drv.ms/1wB5IWF&#34;&gt;http://1drv.ms/1wB5IWF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this tutorial I&amp;rsquo;m going to show you how you with ease can develop and deploy you very own SignalR Chat App!&lt;/p&gt;

&lt;p&gt;The SignalR framework is great for bidirectional communication becauses it uses WebSockets. SignalR handles all the connections and you just need to focuse on implementing your business logic.
&lt;strong&gt;But&lt;/strong&gt;, I have found, that it can be a bit of a fuzz to setup, and to get a connection to the SignalR Hub (which I&amp;rsquo;ll explain in details in a bit), and therefore I wrote this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE&lt;/em&gt;: I have posted &lt;a href=&#34;http://systemout.net/2015/06/10/developing-a-who-is-on-chat-web-app-using-signalr-and-wpf/&#34;&gt;a new tutorial&lt;/a&gt; showing how it is possible to let the clients see who is online. That post builds on this tutorial, so check it out after you have read this one!&lt;/p&gt;

&lt;h3 id=&#34;the-setup:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;The Setup&lt;/h3&gt;

&lt;p&gt;We are going to need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A HTML page&lt;/li&gt;
&lt;li&gt;A javaScript&lt;/li&gt;
&lt;li&gt;A MessageHub (C#)&lt;/li&gt;
&lt;li&gt;A Startup file (also C#)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of the above wrapped in a ASP.NET Web Application solution.&lt;/p&gt;

&lt;p&gt;Before we begin, you can take a look at the product right here:
&lt;a href=&#34;http://systemout.net:56677/ChatWebApp/Messenger.html?username=User1&#34;&gt;http://systemout.net:56677/ChatWebApp/Messenger.html?username=User1&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;implementing-the-solution:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;Implementing the Solution&lt;/h2&gt;

&lt;p&gt;An important note: It is critical that you create a &lt;strong&gt;ASP.NET Web Application&lt;/strong&gt; and &lt;strong&gt;NOT&lt;/strong&gt; a ASP.NET Web Site. Maybe you know that all future web apps should be created as such, as stated by Microsoft, but I didn&amp;rsquo;t and learned it the hard way (meaning my SignalR app didn&amp;rsquo;t work and it took some hours figuring out why not&amp;hellip;).&lt;/p&gt;

&lt;p&gt;But let&amp;rsquo;s get started; fire up Visual Studio, and select File &amp;gt; New &amp;gt; &lt;strong&gt;New Project&lt;/strong&gt;
&lt;img src=&#34;http://systemout.net/images/NewAspNewWebApplication.png&#34; alt=&#34;CPU usage&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Name it ChatWebApp.&lt;/p&gt;

&lt;p&gt;Create and empty project:
&lt;img src=&#34;http://systemout.net/images/EmptyProject.png&#34; alt=&#34;CPU usage&#34; /&gt;
&lt;/p&gt;

&lt;h4 id=&#34;signalr-nuget-packages:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;SignalR NuGet packages&lt;/h4&gt;

&lt;p&gt;There are several ways to start of creating a SignalR enabled project, and you can add a new Hub or a OWIN Startup class directly from Visual Studio&amp;rsquo;s context menues, but I found that I didn&amp;rsquo;t get the lates stable SignalR version when doing so.
Therefore, we are going to add the NuGet packages needed manually:
Right click your new project &amp;gt; Manage NuGet Packages
Click Install to Microsoft ASP.NET SignalR:
&lt;img src=&#34;http://systemout.net/images/SignalRNuget.png&#34; alt=&#34;CPU usage&#34; /&gt;

It will also ask you to install various other packages needed, but the hole process is automated, so no trouble there.&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- links1 --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:inline-block;width:728px;height:15px&#34;
     data-ad-client=&#34;ca-pub-5807169669170468&#34;
     data-ad-slot=&#34;6444119354&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;h4 id=&#34;owin-startup:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;OWIN Startup&lt;/h4&gt;

&lt;p&gt;To do the wire up/mapping of SignalR wee use OWIN.
Simply right click your project, and select Add. Search for OWIN and add a new Startup.cs file.
Replace the content of the file with this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;System&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;System.Threading.Tasks&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;Microsoft.AspNet.SignalR&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;Microsoft.Owin&lt;/span&gt;;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;Owin&lt;/span&gt;;

&lt;span style=&#34;color: #4070a0&#34;&gt;	[assembly: OwinStartup(typeof(ChatWebApp.Startup))]&lt;/span&gt;

	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ChatWebApp&lt;/span&gt;
	{
    	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;Startup&lt;/span&gt;
    	{
        	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;Configuration&lt;/span&gt;(IAppBuilder app)
        	{
            	&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=316888&lt;/span&gt;
            	app.MapSignalR(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;/~/signalr&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; HubConfiguration());
        	}
    	}
	}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The important things here are of course the assembly annotation where we declare that the type ChatWebApp.Startup (this class) should be used by OWIN.
The next thing to note is the MapSignalR method call. By default, VS just uses the MapSignalR method without any parameters, and this works well - when developing on running locallyt, but I have got it to work in a production IIS. Therefore the manually mapping path used for SignalR.&lt;/p&gt;

&lt;h4 id=&#34;the-hub:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;The Hub&lt;/h4&gt;

&lt;p&gt;Now we can add a Hub Class from the conect menu in Visual Studio, because we already added the references manually:
Right click your project &amp;gt; Add &amp;gt; Signal Hub Class (v2). If it isn&amp;rsquo;t there just select Add New Item and search for it.
Name it MessageHub.cs&lt;/p&gt;

&lt;p&gt;Replace the content of the file with this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;System&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;System.Collections.Generic&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;System.Linq&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;System.Web&lt;/span&gt;;
    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;Microsoft.AspNet.SignalR&lt;/span&gt;;

    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;ChatWebApp&lt;/span&gt;
    {
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;MessageHub&lt;/span&gt; : Hub
        {
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;Login&lt;/span&gt;(&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; username)
            {
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Notify all clients that a user is logged in&lt;/span&gt;
                Clients.All.userLoggedIn(username);
            }

            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;SendMessage&lt;/span&gt;(&lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; sender, &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; message)
            {
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Display the new message by calling displayMessage on all connected clients&lt;/span&gt;
                Clients.All.displayMessage(sender, message);
            }
        }
    }
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Here we are adding a method used to &amp;ldquo;log in&amp;rdquo; to our Chat App and a method to send messages.
It should be pretty self explanotory but what we are doing is telling all clients that either a usre has logged in or to display a message.
The userLoggedIn(username) and displayMessage(sender, message) methods are implemented in JavaScript in just a moment.&lt;/p&gt;

&lt;p&gt;For further information about the workings of the Hub, please go to:
&lt;a href=&#34;http://www.asp.net/signalr/overview/signalr-20/hubs-api/hubs-api-guide-server&#34;&gt;http://www.asp.net/signalr/overview/signalr-20/hubs-api/hubs-api-guide-server&lt;/a&gt;&lt;/p&gt;

&lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
&lt;!-- ResponsiveHeader --&gt;
&lt;ins class=&#34;adsbygoogle&#34;
     style=&#34;display:block&#34;
     data-ad-client=&#34;ca-pub-5807169669170468&#34;
     data-ad-slot=&#34;5652122954&#34;
     data-ad-format=&#34;auto&#34;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;

&lt;h4 id=&#34;the-messenger-javascript:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;The Messenger JavaScript&lt;/h4&gt;

&lt;p&gt;Now we have all the C# code we need and can go on to the client side JavaScript.
Add a new JavaScript file, Add &amp;gt; Add New Item &amp;gt; JavaScript and name it MessengerScript.js&lt;/p&gt;

&lt;p&gt;Replace the content of the file with this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	$(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; () {
	    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; username &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; getUrlVars()[&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;];
	
	    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Enable logging for development purpose&lt;/span&gt;
	    $.connection.hub.logging &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;true&lt;/span&gt;;
	    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Declare a proxy to reference the hub.&lt;/span&gt;
	    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; messageHub &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; $.connection.messageHub;
	    &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Create a function that the hub can call to broadcast messages.&lt;/span&gt;
	    messageHub.client.displayMessage &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; (sender, message) {
	        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Wrap the sender and the message in HTML&lt;/span&gt;
	        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; senderDiv &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; $(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;lt;div /&amp;gt;&amp;#39;&lt;/span&gt;).text(sender).html();
	        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; messageDiv &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; $(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;lt;div /&amp;gt;&amp;#39;&lt;/span&gt;).text(message).html();
	        &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Add the message to the page.&lt;/span&gt;
	        $(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;#messagelist&amp;#39;&lt;/span&gt;).append(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;lt;li&amp;gt;&amp;lt;strong&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; senderDiv
	            &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;lt;/strong&amp;gt;:  &amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; messageDiv &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;lt;/li&amp;gt;&amp;#39;&lt;/span&gt;);
	    };
	    
	    $.connection.hub.start(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;~/signalr&amp;quot;&lt;/span&gt;).done(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; () {
	       
	        messageHub.server.login(username);
	
	        $(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;#sendmessage&amp;#39;&lt;/span&gt;).click(&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; () {
	            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; msg &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; $(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;#message&amp;quot;&lt;/span&gt;).val();
	            messageHub.server.sendMessage(username, msg);
	            &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Clear text box and reset focus for next comment.&lt;/span&gt;
	            $(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;#message&amp;#39;&lt;/span&gt;).val(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;).focus();
	        });
	    });
	});
	
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;function&lt;/span&gt; getUrlVars() {
	    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; vars &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; [], hash;
	    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; hashes &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #007020&#34;&gt;window&lt;/span&gt;.location.href.slice(&lt;span style=&#34;color: #007020&#34;&gt;window&lt;/span&gt;.location.href.indexOf(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;?&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;).split(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;);
	    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;var&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; hashes.length; i&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;) {
	        hash &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hashes[i].split(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;=&amp;#39;&lt;/span&gt;);
	        vars.push(hash[&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;]);
	        vars[hash[&lt;span style=&#34;color: #40a070&#34;&gt;0&lt;/span&gt;]] &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; hash[&lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;];
	    }
	    &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; vars;
	}
	
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now a brief note; this is actually the first JavaScript code I have written, so there might be better ways to implement the above, but it works, and the purpose of this tutorial is to show how to use SignalR - not how JavaScript should be written, so bear with me, please :)&lt;/p&gt;

&lt;p&gt;The first part gets the username from a query parameter by calling the last function in the script the getUrlVars (copy pasted somewhere from StackOverflow, can&amp;rsquo;t remember where I found it thou).
Then we enable logging in the SignalR connection, get a reference to the MessageHub class that we just implemented, and now some of the &amp;ldquo;magic&amp;rdquo;: &lt;strong&gt;implementing the displayMessage method&lt;/strong&gt; as we are going to invoke from our MessageHub. The displayMessage is basically wrapping the sender and message in some HTML and added a li to a ul declared in a HTML file we will create in the next step.&lt;/p&gt;

&lt;p&gt;We need to declare the displayMessage method before connecting to the hub so now that this is done we start a connection to the hub and gives it the path as we used in the Startup.cs. Then, when the connection is done we are calling login on the hub and last but not least &lt;strong&gt;implementing the sendMessage method&lt;/strong&gt; which gets the message from a input box (which we also will implement in a HTML file in a moment) and then we call the SendMessage method on the hub.&lt;/p&gt;

&lt;h4 id=&#34;the-html-page:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;The HTML Page&lt;/h4&gt;

&lt;p&gt;Next we add the HTML page which the user sees. Add &amp;gt; New Item &amp;gt; HTML Page. Name it Messenger.html
Replace the content of the file with this:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    &lt;span style=&#34;color: #007020&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;html&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
	    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;ChatWebApp&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
	    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
	        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;script&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;src=&amp;quot;Scripts/jquery-1.6.4.js&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;script&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;src=&amp;quot;Scripts/jquery.signalR-2.1.0.js&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;script&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;src=&amp;quot;~/signalr/hub&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;script&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;src=&amp;quot;Scripts/MessengerScript.js&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;input&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;id=&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
	        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;input&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;id=&amp;quot;sendmessage&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;type=&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;value=&amp;quot;Send&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
	        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;ul&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;id=&amp;quot;messagelist&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
	            
	        &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
	    &lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now the most important path here, are:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;lt;script&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;src=&amp;quot;~/signalr/hub&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #062873; font-weight: bold&#34;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Visual Studio will complain about this, because we have no script in the path, but this is because the script is generated by SignalR on runtime and we are just telling where it can be found.
Besides we have the elements used to interact with our system.&lt;/p&gt;

&lt;p&gt;With this in place, you can run your new application and test it in your browser, before continuing to the next part, where we will deploy to IIS.&lt;/p&gt;

&lt;h4 id=&#34;a-note-on-debugging-in-vs:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;A note on debugging in VS&lt;/h4&gt;

&lt;p&gt;I have experienced a lot of difficulties while debugging/running my SignalR apps in Visual Studio 2013. Sometimes, when I reopen a solution that previously &amp;ldquo;just worked&amp;rdquo;, it all of the sudden don&amp;rsquo;t anymore, meaning that the ~/signalr/js gives a 404 on localhost or the client can not be found.
A fix for this seems to be restarting VS, restarting the IIS Express by right clicking on the tray icon:
&lt;img src=&#34;http://systemout.net/images/IISExpress.png&#34; alt=&#34;&#34; /&gt;

&amp;hellip;or simply just hitting my screen, going for some coffee and when returning, it magically just works.&lt;/p&gt;

&lt;h3 id=&#34;deploying-the-signalr-app-to-iis:819ac8d9cdec72dc096ec55720e219a7&#34;&gt;Deploying the SignalR App to IIS&lt;/h3&gt;

&lt;p&gt;We use Visual Studio to publish the site. Right-click your project, select Publish
In the dialog click the Custom option as publish target and give it a name.
Select File System in the next drop down and enter a location for the published files.
In settings you can choose to precompile your source files, if you want to, just expand the File Publish Options and check the according box.&lt;/p&gt;

&lt;p&gt;Click Publish.&lt;/p&gt;

&lt;p&gt;Now we that we have our files ready, we need to make the IIS ready for hosting our App.&lt;/p&gt;

&lt;p&gt;On your server, create the folder C:\wwwroot\ChatWebApp (or anywhere else you like).
Copy the contents from the Publish folder (on your dev pc) where Visual Studio published the files to into C:\wwwroot\ChatWebApp on IIS.
On your server open IIS Manager, expand Default Website. If your new folder is in the tree view right click and select Refresh.
Select the ChatWebApp folder, right click and select Convert to Application.&lt;/p&gt;

&lt;p&gt;Now on your server go to &lt;a href=&#34;http://localhost/ChatWebApp/Messenger.html?username=MySuperDupperUser&#34;&gt;http://localhost/ChatWebApp/Messenger.html?username=MySuperDupperUser&lt;/a&gt; and watch the magic!&lt;/p&gt;

&lt;p&gt;You can download the complete solution right here: &lt;a href=&#34;http://1drv.ms/1wB5IWF&#34;&gt;http://1drv.ms/1wB5IWF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have in problems, or comments, let me know.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE&lt;/em&gt;: I have posted &lt;a href=&#34;http://systemout.net/2015/06/10/developing-a-who-is-on-chat-web-app-using-signalr-and-wpf/&#34;&gt;a new tutorial&lt;/a&gt; showing how it is possible to let the clients see who is online. That post builds on this tutorial, so check it out after you have read this one!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SignalR Hub Reference - done right!</title>
      <link>http://localhost:1313/2014/07/15/signalr-hub-reference-done-right/</link>
      <pubDate>Tue, 15 Jul 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://localhost:1313/2014/07/15/signalr-hub-reference-done-right/</guid>
      <description>

&lt;p&gt;UPDATE: I have now written a complete SignalR tutorial, see this post: &lt;a href=&#34;http://systemout.net/2014/07/17/developing-and-deploying-a-signalr-chat-web-app-to-iis/&#34;&gt;http://systemout.net/2014/07/17/developing-and-deploying-a-signalr-chat-web-app-to-iis/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SignalR is nice. No doubt about that. But it is very much immature, not the framework, more the tutorials, guidelines, etc.&lt;/p&gt;

&lt;p&gt;I have been strugling a bit with the Javascript/client setup of the hub connection - especially when deploying to an IIS 8 in production, where all the magic stopped to happen. There is not much to gain from WebSockets, if the connection can&amp;rsquo;t be opened because the scripts won&amp;rsquo;t load.&lt;/p&gt;

&lt;p&gt;Any way, in an ASP.NET Web Application using SignalR with a generated hub proxy you need the following things to be able to make the connection:
OWIN Startup.cs (Add &amp;gt; New Item &amp;gt; Owin Startup):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Microsoft.AspNet.SignalR;
using Microsoft.Owin;
using Owin;

[assembly: OwinStartup(typeof(SystemOut.Gateway.WebApp.Startup))]

namespace SystemOut.Gateway.WebApp
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            // For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=316888
            app.MapSignalR(&amp;quot;/~/signalr&amp;quot;, new HubConfiguration());
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;NOTICE&lt;/strong&gt; the &amp;ldquo;/~/signalr - this is needed, if you, as I, are running the site in your production environment as a sub directory for the main site.&lt;/p&gt;

&lt;p&gt;Because of this, you need to reference the generated SignalR proxy a little different than most samples I came across do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&amp;quot;~/signalr/js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You also need to create the hub connection a little bit different, in your scripts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.connection.hub.start(&amp;quot;~/signalr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That should do it!&lt;/p&gt;

&lt;p&gt;Remember, you can always enable logging to the browsers console (F12) by adding this line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.connection.hub.logging = true;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;just before:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$.connection.hub.start(&amp;quot;~/signalr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-trouble:8ee58b73c21ae6829694450168d54780&#34;&gt;The trouble&lt;/h4&gt;

&lt;p&gt;Before settings things up this way, I received a &amp;ldquo;Unable to get property &amp;lsquo;client&amp;rsquo; of undefined or null reference&amp;rdquo; in the IE console when loading the page. In that case, the &amp;ldquo;client&amp;rdquo; referenced was the SignalR client in the Hub.
I investigated it further by looking in Fiddler and in Chrome. In the console in Chrome I got &amp;ldquo;&lt;a href=&#34;http://myip/signalr/js&#34;&gt;http://myip/signalr/js&lt;/a&gt; 404 (Not Found)&amp;rdquo; which lead me to come up with the above solution, becuase I only had the problem when deploying the application to IIS - not when I ran it locally from Visual Studio 2013.&lt;/p&gt;

&lt;p&gt;As an end note; it makes no difference for me whether I use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/signalr/js 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/signalr/hubs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it for now. I&amp;rsquo;m working on a full tutorial to developing AND deploying an ASP.NET Web Application with SignalR, so check back soon! :)&lt;/p&gt;

&lt;p&gt;UPDATE: I have now written a complete SignalR tutorial, see this post: &lt;a href=&#34;http://systemout.net/2014/07/17/developing-and-deploying-a-signalr-chat-web-app-to-iis/&#34;&gt;http://systemout.net/2014/07/17/developing-and-deploying-a-signalr-chat-web-app-to-iis/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&#39;Moving on – WordPress to Octopress/Jekyll on a Pi&#39;</title>
      <link>http://localhost:1313/2014/05/02/moving-on-wordpress-to-octopress-slash-jekyll-on-a-pi/</link>
      <pubDate>Fri, 02 May 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://localhost:1313/2014/05/02/moving-on-wordpress-to-octopress-slash-jekyll-on-a-pi/</guid>
      <description>

&lt;p&gt;This 1 post is part of a series of posts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Summary (this post)&lt;/li&gt;
&lt;li&gt;The Pi: &lt;a href=&#34;http://systemout.net/2014/07/20/how-to-setup-octopress-for-jekyll-on-a-raspberry-pi/&#34;&gt;http://systemout.net/2014/07/20/how-to-setup-octopress-for-jekyll-on-a-raspberry-pi/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Blog&lt;/li&gt;
&lt;li&gt;The Rest (including the network)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;introduction:5242ebc0f1909014c89a5f31ee286dd7&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;The look ’n feel of the blog has changed, as you may have noticed.
The reason for this is simple; slow performance, increasing cost to hosting and pure curiosity, got me into migrating the existing WordPress solution into a static Octopress on Jekyll solution. Oh, and the new solution is hosted on a Raspberry Pi, &lt;a href=&#34;http://swag.raspberrypi.org/collections/frontpage/products/raspberry-pi-model-b&#34; target=&#34;_blank&#34;&gt;model B&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The result is amazing – the average response time is down around 400 MS after little over a week on the pie. Before it was about 1,5-2 secs.
In this post I’ll explain how the migration is done and which challenges I faced. I will not go into details, but I will provide you with the links to some great articles I used along the way.&lt;/p&gt;

&lt;h3 id=&#34;summary:5242ebc0f1909014c89a5f31ee286dd7&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;First a brief summary of the steps required.
The Pi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install Raspbian&lt;/li&gt;
&lt;li&gt;Setup static IP&lt;/li&gt;
&lt;li&gt;Install NGINX&lt;/li&gt;
&lt;li&gt;Install RVM&lt;/li&gt;
&lt;li&gt;Install Ruby&lt;/li&gt;
&lt;li&gt;Install Octopress&lt;/li&gt;
&lt;li&gt;Configuration of NGINX/Octopress&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download existing post, comments, pages, etc&lt;/li&gt;
&lt;li&gt;Convert to Octopress/Jekyll format&lt;/li&gt;
&lt;li&gt;Upload to Pi&lt;/li&gt;
&lt;li&gt;Build the new Blog&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Network:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DNS&lt;/li&gt;
&lt;li&gt;NAT on home network&lt;/li&gt;
&lt;li&gt;Limit torrents!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next post, I will dig into the details in configuring the Pi, and that post is available right here: &lt;a href=&#34;http://systemout.net/2014/07/20/how-to-setup-octopress-for-jekyll-on-a-raspberry-pi/&#34;&gt;http://systemout.net/2014/07/20/how-to-setup-octopress-for-jekyll-on-a-raspberry-pi/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>