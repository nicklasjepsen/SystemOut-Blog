<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Publishing Schema on SystemOut</title>
    <link>http://localhost:1313/tags/publishing-schema/</link>
    <description>Recent content in Publishing Schema on SystemOut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>nmj@systemout.net (Nicklas Møller Jepsen)</managingEditor>
    <webMaster>nmj@systemout.net (Nicklas Møller Jepsen)</webMaster>
    <lastBuildDate>Wed, 18 Dec 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/publishing-schema/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating a REST (and SOAP) Enabled WCF Service</title>
      <link>http://localhost:1313/2013/12/18/creating-a-rest-and-soap-enabled-wcf-service/</link>
      <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://localhost:1313/2013/12/18/creating-a-rest-and-soap-enabled-wcf-service/</guid>
      <description>&lt;p&gt;In this post I&amp;#8217;m going to walk you through the process of creating a REST/SOAP enabled WCF service using .NET 4.5.1 and Visual Studio 2013.&lt;/p&gt;

&lt;p&gt;If you just want to try for yourself you can download the complete solution &lt;a href=&#34;http://sdrv.ms/1fntPAZ&#34; title=&#34;Donwload from my SKyDrive&#34; target=&#34;_blank&#34;&gt;here!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select New Project &amp;gt; Templates &amp;gt; C# &amp;gt; WCF &amp;gt; WCF Service Application: &lt;a href=&#34;http://www.systemout.net/wp-content/uploads/2013/12/CreateWcfServiceProject.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-214&#34; alt=&#34;CreateWcfServiceProject&#34; src=&#34;http://www.systemout.net/wp-content/uploads/2013/12/CreateWcfServiceProject.png&#34; width=&#34;955&#34; height=&#34;660&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will create a project containing only the basics – the interface, implementation and a .config file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you’re wondering about the name Trusic then I can tell you that it is the name of a service I’m writing for use in an in-depth guide to object oriented thinking and programming using the newest .NET technologies.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can try the service generated by the template out by marking the Service1.svc file in solution explorer and hit F5 to debug the service. (By marking Service1.svc Visual Studio is starting the WCF Test Client for you).&lt;/p&gt;

&lt;p&gt;Now select the GetData operation and enter a value and hit Invoke:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.systemout.net/wp-content/uploads/2013/12/WcfTestClientInvoke.png&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-215&#34; alt=&#34;WCF Test Client&#34; src=&#34;http://www.systemout.net/wp-content/uploads/2013/12/WcfTestClientInvoke.png&#34; width=&#34;808&#34; height=&#34;512&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This invokes the default SOAP endpoint which is fine, but SOAP is a bit old-school and we are of course going to be publishing our service through a RESTful JSON endpoint also. This requires minimal code changes and only a bit changes to the web.config file.&lt;/p&gt;

&lt;p&gt;In you service’s SVC file add the following annotation to the GetData method: [WebGet] it should look like so:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;[WebGet]
        public string GetData(int value)
        {
            return string.Format(&#34;You entered: {0}&#34;, value);
        }
&lt;/pre&gt;

&lt;p&gt;In the Web.config insert the following after :&lt;/p&gt;

&lt;pre class=&#34;brush: xml; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;services&amp;gt;
      &amp;lt;service name=&#34;WcfService1.Service1&#34;&amp;gt;
        &amp;lt;endpoint address=&#34;soap&#34; binding=&#34;basicHttpBinding&#34;  behaviorConfiguration=&#34;soapBehavior&#34; contract=&#34;WcfService1.IService1&#34;/&amp;gt;
        &amp;lt;endpoint address=&#34;json&#34; binding=&#34;webHttpBinding&#34;  behaviorConfiguration=&#34;jsonBehavior&#34; contract=&#34;WcfService1.IService1&#34;/&amp;gt;
      &amp;lt;/service&amp;gt;
    &amp;lt;/services&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Make sure that the service name is set to the name of your service SVC file and that the contract is set to the name of your interface.&lt;/p&gt;

&lt;p&gt;In the element add:&lt;/p&gt;

&lt;pre class=&#34;brush: xml; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;endpointBehaviors&amp;gt;
        &amp;lt;behavior name=&#34;soapBehavior&#34;&amp;gt;
        &amp;lt;/behavior&amp;gt;
        &amp;lt;behavior name=&#34;jsonBehavior&#34;&amp;gt;
          &amp;lt;enableWebScript/&amp;gt;
        &amp;lt;/behavior&amp;gt;
      &amp;lt;/endpointBehaviors&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Now hit F5 and open your browser, navigate to: &lt;a href=&#34;http://localhost:/.svc/json/GetData?value=10&#34;&gt;http://localhost:/.svc/json/GetData?value=10&lt;/a&gt; and look for the magic to happen:&lt;/p&gt;

&lt;div id=&#34;attachment_216&#34; style=&#34;width: 807px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://www.systemout.net/wp-content/uploads/2013/12/ChromeInvokeRestService.png&#34;&gt;&lt;img class=&#34;size-full wp-image-216&#34; alt=&#34;REST service call in Chrome&#34; src=&#34;http://www.systemout.net/wp-content/uploads/2013/12/ChromeInvokeRestService.png&#34; width=&#34;797&#34; height=&#34;355&#34; /&gt;&lt;/a&gt;&lt;p class=&#34;wp-caption-text&#34;&gt;
    REST service call in Chrome
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;If that isn’t good enough we still have our SOAP endpoint available. For instance in soapUI try to invoke your service by adding a new endpoint:&lt;br /&gt;
&lt;a href=&#34;http://www.systemout.net/wp-content/uploads/2013/12/CreateSoapUiProject.png&#34;&gt;&lt;img src=&#34;http://www.systemout.net/wp-content/uploads/2013/12/CreateSoapUiProject.png&#34; alt=&#34;Create a soapUi project&#34; width=&#34;546&#34; height=&#34;359&#34; class=&#34;aligncenter size-full wp-image-230&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now soapUI has generated a proxy client you can use to invoke the SOAP endpoint of the service:&lt;br /&gt;
&lt;a href=&#34;http://www.systemout.net/wp-content/uploads/2013/12/InvokeSoapEndpointSoapUi.png&#34;&gt;&lt;img src=&#34;http://www.systemout.net/wp-content/uploads/2013/12/InvokeSoapEndpointSoapUi.png&#34; alt=&#34;Invoke the operation through the SOAP endpoint&#34; width=&#34;1104&#34; height=&#34;750&#34; class=&#34;aligncenter size-full wp-image-231&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beautiful! :)&lt;/p&gt;

&lt;p&gt;Remember; you can download the solution &lt;a href=&#34;http://sdrv.ms/1fntPAZ&#34; title=&#34;Donwload from my SKyDrive&#34; target=&#34;_blank&#34;&gt;here!&lt;/a&gt;&lt;/p&gt;

&lt;div style=&#34;font-size:0px;height:0px;line-height:0px;margin:0;padding:0;clear:both&#34;&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Publish WCF Service on IIS</title>
      <link>http://localhost:1313/2012/03/20/publish-wcf-service-on-iis/</link>
      <pubDate>Tue, 20 Mar 2012 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://localhost:1313/2012/03/20/publish-wcf-service-on-iis/</guid>
      <description>

&lt;p&gt;Recently I needed to publish a WCF service on an IIS. This progress I quite smooth when you just need to access the WCF service locally, but ones you need to publish the service on the great Internet, things are a little more difficult.&lt;/p&gt;

&lt;h1 id=&#34;publishing-the-wsdl:2dfe303ef8c9fb481ee449fd73df7f75&#34;&gt;Publishing the WSDL&lt;/h1&gt;

&lt;p&gt;The ‘WSDL generation strategy’ when using WCF is that you get multiple documents to describe your service. This can lead to some problems if you’re just publishing without making some customizations.&lt;/p&gt;

&lt;p&gt;Have a look at the wsdl:types:&lt;/p&gt;

&lt;pre class=&#34;brush: xml; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;wsdl:types&amp;gt;
    &amp;lt;xsd:schema targetNamespace=&#34;http://tempuri.org/Imports&#34;&amp;gt;
        &amp;lt;xsd:import schemaLocation=&#34;http://localhost/Service/Service.svc?xsd=xsd0&#34;namespace=&#34;http://tempuri.org/&#34;/&amp;gt;
        &amp;lt;xsd:import schemaLocation=&#34;http://localhost/Service/Service.svc?xsd=xsd2&#34;namespace=&#34;http://schemas.datacontract.org/2004/07/Service.Interface&#34;/&amp;gt;
    &amp;lt;/xsd:schema&amp;gt;
&amp;lt;/wsdl:types&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Notice the localhost, that will definitely cause some trouble if you need to consume the WSDL from an external machine.&lt;/p&gt;

&lt;h1 id=&#34;how-to-fix-this:2dfe303ef8c9fb481ee449fd73df7f75&#34;&gt;How to fix this?&lt;/h1&gt;

&lt;p&gt;There’re two ways to solve this (if not more):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fix the host name (this post)&lt;/li&gt;
&lt;li&gt;Generate a single WSDL (future post)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;fix-the-host-name:2dfe303ef8c9fb481ee449fd73df7f75&#34;&gt;Fix the host name&lt;/h2&gt;

&lt;p&gt;It’s actually the IIS who are responsible of the host name. Therefore we need to configure the bindings for the web site the WCF service is hosted on.&lt;/p&gt;

&lt;p&gt;Go to IIS Manager, right click the web site and choose Edit bindings:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://systemout.net/wp-content/uploads/2012/03/iis_tree.png&#34;&gt;&lt;img style=&#34;background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;&#34; title=&#34;iis_tree&#34; src=&#34;http://systemout.net/wp-content/uploads/2012/03/iis_tree_thumb.png&#34; alt=&#34;iis_tree&#34; width=&#34;211&#34; height=&#34;74&#34; border=&#34;0&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now click the Add button and enter the external host name or ip where your service/wsdl will be available from:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://systemout.net/wp-content/uploads/2012/03/addbinding.png&#34;&gt;&lt;img style=&#34;background-image: none; padding-left: 0px; padding-right: 0px; display: inline; padding-top: 0px; border: 0px;&#34; title=&#34;addbinding&#34; src=&#34;http://systemout.net/wp-content/uploads/2012/03/addbinding_thumb.png&#34; alt=&#34;addbinding&#34; width=&#34;244&#34; height=&#34;133&#34; border=&#34;0&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Restart the web site and go to &lt;a href=&#34;http://mydomain.com/serviceAlias/Service.svc?wsdl&#34;&gt;http://mydomain.com/serviceAlias/Service.svc?wsdl&lt;/a&gt; and your should see that the imports are now using the external host name.&lt;/p&gt;

&lt;h2 id=&#34;generate-a-single-wsdl:2dfe303ef8c9fb481ee449fd73df7f75&#34;&gt;Generate a single WSDL&lt;/h2&gt;

&lt;p&gt;You can also choose to generate a single WSDL file for your WCF service. I will post about that later, meanwhile take a look at &lt;a href=&#34;http://weblogs.asp.net/pglavich/archive/2010/03/16/making-wcf-output-a-single-wsdl-file-for-interop-purposes.aspx&#34; target=&#34;_blank&#34;&gt;this great article&lt;/a&gt; that describes it – although I find it a bit to complex and therefore are going to write my own post about it when the time comes &lt;img class=&#34;wlEmoticon wlEmoticon-smile&#34; style=&#34;border-style: none;&#34; src=&#34;http://systemout.net/wp-content/uploads/2012/03/wlEmoticon-smile.png&#34; alt=&#34;Smile&#34; /&gt;&lt;/p&gt;

&lt;div style=&#34;font-size:0px;height:0px;line-height:0px;margin:0;padding:0;clear:both&#34;&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>