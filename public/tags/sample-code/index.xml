<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sample Code on SystemOut</title>
    <link>http://systemout.net/tags/sample-code/</link>
    <description>Recent content in Sample Code on SystemOut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>nmj@systemout.net (Nicklas Møller Jepsen)</managingEditor>
    <webMaster>nmj@systemout.net (Nicklas Møller Jepsen)</webMaster>
    <lastBuildDate>Thu, 19 Dec 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://systemout.net/tags/sample-code/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>&#39;C# Generic Xml Parser Example&#39;</title>
      <link>http://systemout.net/2013/12/19/csharp-generic-xml-parser-example/</link>
      <pubDate>Thu, 19 Dec 2013 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2013/12/19/csharp-generic-xml-parser-example/</guid>
      <description>&lt;p&gt;In this post I will show how to implement and use a generic xml parser library.&lt;/p&gt;

&lt;p&gt;For the complete solution and source code, &lt;a href=&#34;http://sdrv.ms/18BwjwK&#34; title=&#34;XmlParser.zip&#34; target=&#34;_blank&#34;&gt;click here!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wanted to add a tool to my source toolbox, a library to use when handling xml data representations because I was tired of writing/googling the same implementations each time I had the need for some xml parsing.&lt;/p&gt;

&lt;p&gt;Therefore I wrote a tiny simple XmlParser which can be invoked like so:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;// Create some persons and get their XML represantation
            var me = new Person
            {
                Name = &#34;Nicklas Møller Jepsen&#34;,
                YearBorn = 1985,
                Address = new Address
                {
                    StreetName = &#34;Mainstreet&#34;,
                    StreetNumber = 10,
                    City = &#34;Copenhagen&#34;,
                    PostalCode = &#34;2100&#34;,
                }
            };

            var myGirlfriend = new Person
            {
                Name = &#34;Scarlett Johansson&#34;,
                YearBorn = 1984,
                Address = me.Address // Of course!
            };

            // Now get the xml from the objects!
            var meXml = XmlParser.ToXml(me);
            var girlfriendXml = XmlParser.ToXml(myGirlfriend);
&lt;/pre&gt;

&lt;p&gt;&amp;#8230;and to get the object representation from the xml string simply do the following:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;// Now parse the xml into a new object
            var newMe = XmlParser.ToObject&amp;lt;Person&amp;gt;(meXml);
&lt;/pre&gt;

&lt;p&gt;Quite simple!&lt;br /&gt;
The source code for the parser is not more than a few lines of code and wrapped in some exception handling so I only need to worry about ONE exception, namely the XmlParserException.&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;public static string ToXml&amp;lt;T&amp;gt;(T objectToParse) where T : class, new()
        {
            if (objectToParse == null)
                throw new XmlParserException(&#34;Unable to parse a object which is null.&#34;, new ArgumentNullException(&#34;objectToParse&#34;));

            var stringwriter = new System.IO.StringWriter();
            var serializer = new XmlSerializer(typeof(T));
            try
            {
                serializer.Serialize(stringwriter, objectToParse);
            }
            catch (Exception e)
            {
                throw new XmlParserException(string.Format(&#34;Unable to serialize the object {0}.&#34;, objectToParse.GetType()), e);
            }

            return stringwriter.ToString();
        }

        public static T ToObject&amp;lt;T&amp;gt;(string xmlTextToParse) where T : class, new()
        {
            if (string.IsNullOrEmpty(xmlTextToParse))
                throw new XmlParserException(&#34;Invalid string input. Cannot parse an empty or null string.&#34;, new ArgumentException(&#34;xmlTestToParse&#34;));

            var stringReader = new System.IO.StringReader(xmlTextToParse);
            var serializer = new XmlSerializer(typeof(T));
            try
            {
                return serializer.Deserialize(stringReader) as T;
            }
            catch (Exception e)
            {
                throw new XmlParserException(string.Format(&#34;Unable to convert to given string into the type {0}. See inner exception for details.&#34;, typeof(T)), e);
            }
        }
&lt;/pre&gt;

&lt;p&gt;Nothing special going on here, using some XmlSerializers &amp;#8216;n stuff. But the main value of this is that it is wrapped up in my toolbox library so I can just reference this class whenever I need it.&lt;/p&gt;

&lt;p&gt;Let me know what you think and if you have any ideas what else should be in a developer source toolbox and I will add it!&lt;/p&gt;

&lt;p&gt;For the complete solution and source code, &lt;a href=&#34;http://sdrv.ms/18BwjwK&#34; title=&#34;XmlParser.zip&#34; target=&#34;_blank&#34;&gt;click here!&lt;/a&gt;&lt;/p&gt;

&lt;div style=&#34;font-size:0px;height:0px;line-height:0px;margin:0;padding:0;clear:both&#34;&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Creating a REST (and SOAP) Enabled WCF Service</title>
      <link>http://systemout.net/2013/12/18/creating-a-rest-and-soap-enabled-wcf-service/</link>
      <pubDate>Wed, 18 Dec 2013 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2013/12/18/creating-a-rest-and-soap-enabled-wcf-service/</guid>
      <description>&lt;p&gt;In this post I&amp;#8217;m going to walk you through the process of creating a REST/SOAP enabled WCF service using .NET 4.5.1 and Visual Studio 2013.&lt;/p&gt;

&lt;p&gt;If you just want to try for yourself you can download the complete solution &lt;a href=&#34;http://sdrv.ms/1fntPAZ&#34; title=&#34;Donwload from my SKyDrive&#34; target=&#34;_blank&#34;&gt;here!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select New Project &amp;gt; Templates &amp;gt; C# &amp;gt; WCF &amp;gt; WCF Service Application: &lt;a href=&#34;http://www.systemout.net/wp-content/uploads/2013/12/CreateWcfServiceProject.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-214&#34; alt=&#34;CreateWcfServiceProject&#34; src=&#34;http://www.systemout.net/wp-content/uploads/2013/12/CreateWcfServiceProject.png&#34; width=&#34;955&#34; height=&#34;660&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will create a project containing only the basics – the interface, implementation and a .config file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you’re wondering about the name Trusic then I can tell you that it is the name of a service I’m writing for use in an in-depth guide to object oriented thinking and programming using the newest .NET technologies.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can try the service generated by the template out by marking the Service1.svc file in solution explorer and hit F5 to debug the service. (By marking Service1.svc Visual Studio is starting the WCF Test Client for you).&lt;/p&gt;

&lt;p&gt;Now select the GetData operation and enter a value and hit Invoke:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.systemout.net/wp-content/uploads/2013/12/WcfTestClientInvoke.png&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-215&#34; alt=&#34;WCF Test Client&#34; src=&#34;http://www.systemout.net/wp-content/uploads/2013/12/WcfTestClientInvoke.png&#34; width=&#34;808&#34; height=&#34;512&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This invokes the default SOAP endpoint which is fine, but SOAP is a bit old-school and we are of course going to be publishing our service through a RESTful JSON endpoint also. This requires minimal code changes and only a bit changes to the web.config file.&lt;/p&gt;

&lt;p&gt;In you service’s SVC file add the following annotation to the GetData method: [WebGet] it should look like so:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;[WebGet]
        public string GetData(int value)
        {
            return string.Format(&#34;You entered: {0}&#34;, value);
        }
&lt;/pre&gt;

&lt;p&gt;In the Web.config insert the following after :&lt;/p&gt;

&lt;pre class=&#34;brush: xml; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;services&amp;gt;
      &amp;lt;service name=&#34;WcfService1.Service1&#34;&amp;gt;
        &amp;lt;endpoint address=&#34;soap&#34; binding=&#34;basicHttpBinding&#34;  behaviorConfiguration=&#34;soapBehavior&#34; contract=&#34;WcfService1.IService1&#34;/&amp;gt;
        &amp;lt;endpoint address=&#34;json&#34; binding=&#34;webHttpBinding&#34;  behaviorConfiguration=&#34;jsonBehavior&#34; contract=&#34;WcfService1.IService1&#34;/&amp;gt;
      &amp;lt;/service&amp;gt;
    &amp;lt;/services&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Make sure that the service name is set to the name of your service SVC file and that the contract is set to the name of your interface.&lt;/p&gt;

&lt;p&gt;In the element add:&lt;/p&gt;

&lt;pre class=&#34;brush: xml; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;endpointBehaviors&amp;gt;
        &amp;lt;behavior name=&#34;soapBehavior&#34;&amp;gt;
        &amp;lt;/behavior&amp;gt;
        &amp;lt;behavior name=&#34;jsonBehavior&#34;&amp;gt;
          &amp;lt;enableWebScript/&amp;gt;
        &amp;lt;/behavior&amp;gt;
      &amp;lt;/endpointBehaviors&amp;gt;
&lt;/pre&gt;

&lt;p&gt;Now hit F5 and open your browser, navigate to: &lt;a href=&#34;http://localhost:/.svc/json/GetData?value=10&#34;&gt;http://localhost:/.svc/json/GetData?value=10&lt;/a&gt; and look for the magic to happen:&lt;/p&gt;

&lt;div id=&#34;attachment_216&#34; style=&#34;width: 807px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;http://www.systemout.net/wp-content/uploads/2013/12/ChromeInvokeRestService.png&#34;&gt;&lt;img class=&#34;size-full wp-image-216&#34; alt=&#34;REST service call in Chrome&#34; src=&#34;http://www.systemout.net/wp-content/uploads/2013/12/ChromeInvokeRestService.png&#34; width=&#34;797&#34; height=&#34;355&#34; /&gt;&lt;/a&gt;&lt;p class=&#34;wp-caption-text&#34;&gt;
    REST service call in Chrome
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;If that isn’t good enough we still have our SOAP endpoint available. For instance in soapUI try to invoke your service by adding a new endpoint:&lt;br /&gt;
&lt;a href=&#34;http://www.systemout.net/wp-content/uploads/2013/12/CreateSoapUiProject.png&#34;&gt;&lt;img src=&#34;http://www.systemout.net/wp-content/uploads/2013/12/CreateSoapUiProject.png&#34; alt=&#34;Create a soapUi project&#34; width=&#34;546&#34; height=&#34;359&#34; class=&#34;aligncenter size-full wp-image-230&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now soapUI has generated a proxy client you can use to invoke the SOAP endpoint of the service:&lt;br /&gt;
&lt;a href=&#34;http://www.systemout.net/wp-content/uploads/2013/12/InvokeSoapEndpointSoapUi.png&#34;&gt;&lt;img src=&#34;http://www.systemout.net/wp-content/uploads/2013/12/InvokeSoapEndpointSoapUi.png&#34; alt=&#34;Invoke the operation through the SOAP endpoint&#34; width=&#34;1104&#34; height=&#34;750&#34; class=&#34;aligncenter size-full wp-image-231&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beautiful! :)&lt;/p&gt;

&lt;p&gt;Remember; you can download the solution &lt;a href=&#34;http://sdrv.ms/1fntPAZ&#34; title=&#34;Donwload from my SKyDrive&#34; target=&#34;_blank&#34;&gt;here!&lt;/a&gt;&lt;/p&gt;

&lt;div style=&#34;font-size:0px;height:0px;line-height:0px;margin:0;padding:0;clear:both&#34;&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>&#39;Extension methods in C#/.NET&#39;</title>
      <link>http://systemout.net/2013/12/10/extensions-methods-in-c-net/</link>
      <pubDate>Tue, 10 Dec 2013 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2013/12/10/extensions-methods-in-c-net/</guid>
      <description>&lt;p&gt;A nice feature in C# is the ability to use extension methods. These methods can be used (as the name suggests) to extend functionality to existing classes.&lt;/p&gt;

&lt;p&gt;In my opinion, extension methods can be used to &lt;strong&gt;write cleaner and more easy to read code&lt;/strong&gt;. They can also be used to avoid &lt;strong&gt;duplicate code&lt;/strong&gt;.&lt;br /&gt;
Take an example; you are writing an application, which needs to determine if an email address is in a valid format (eg. name@domain.com). Now, you could make this check right where the users enters the email or you could create a custom TextBox control which will only accept valid email addresses. That is fine.&lt;/p&gt;

&lt;p&gt;But what if another part of your application is using the provided email address but to make the application robust it is surely validating that the email is in fact a valid email address before using it?&lt;/p&gt;

&lt;p&gt;The custom TextBox would not be of much use and the code you wrote where the user enters the email address cannot be invoked from the other part of your application.&lt;br /&gt;
Now the extension method comes in handy. Let’s say you can call a method on the string object with the name IsValidEmail – that would be nice. This can be achieved by writing an extension method for a string.&lt;br /&gt;
There are some general rules when writing extension methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The containing &lt;strong&gt;class **must be declared as **static&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;method&lt;/strong&gt; must be &lt;strong&gt;static&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The first &lt;strong&gt;parameter&lt;/strong&gt; of the method must be declared with &lt;strong&gt;this keyword&lt;/strong&gt; and be of the type you want to extent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh and the namespace in which you declare the extension method must be used by the class where you are calling the extension from. As an example, try to remove ‘using System.Linq’ from a class and the try to use List.Any() – that won’t compile.&lt;/p&gt;

&lt;p&gt;Now for an example here is a simple IsValidEmail extension method implementation.&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;public static class StringExtensions
    {
        public static bool IsValidEmail(this string input)
        {
            try
            {
                if (string.IsNullOrEmpty(input))
                    return false;
                new System.Net.Mail.MailAddress(input);
                return true;
            }
            catch (FormatException)
            {
                return false;
            }
        }
    }
&lt;/pre&gt;

&lt;p&gt;And here is how the extension can be used:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;string emailAddress = &#34;someone@domain.com&#34;;
            if (emailAddress.IsValidEmail())
                // The string is a valid email
&lt;/pre&gt;

&lt;p&gt;Surely there are other ways to achieve the same thing, and sometimes extension methods are not the best way of doing so (C# is object oriented, so you should write OO code which extension methods can tend to abstain a little from), but this post will not go into details about the OO thinking, look for a later post on that subject.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://sdrv.ms/1f4XzCH&#34; title=&#34;Extension method source code&#34; target=&#34;_blank&#34;&gt;Download the source code from here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For further reading about the subject, have a look at &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/bb383977.aspx&#34; target=&#34;_blank&#34;&gt;Microsoft&amp;#8217;s Programming Guide on Extentension Methods&lt;/a&gt;.&lt;/p&gt;

&lt;div style=&#34;font-size:0px;height:0px;line-height:0px;margin:0;padding:0;clear:both&#34;&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Generic Retry Function to Avoid Duplicate Code</title>
      <link>http://systemout.net/2013/12/07/retryfunction/</link>
      <pubDate>Sat, 07 Dec 2013 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2013/12/07/retryfunction/</guid>
      <description>&lt;p&gt;Sometimes you have a method which you want to be executed again if it fails the first time.&lt;br /&gt;
This could lead to duplicate code, or to at least to a for loop wrapping the implementation of the method which is OK but what if you had two methods you needed this retry logic for?&lt;/p&gt;

&lt;p&gt;You simply make a method which takes a the method you need to be executed with retry as a parameter. Like this:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;private static string ExecuteWithRetry(Func&amp;lt;MethodResult&amp;gt; method, int maxRetries)
        {
            Console.WriteLine(&#34;Executing operation.&#34;);
            for (var iteration = 1; iteration &amp;lt;= maxRetries; iteration++)
            {
                var result = method();
                _numberOfRuns++;
                Console.WriteLine(&#34;Operation executed {0} times.&#34;, _numberOfRuns);
                if (result.Success)
                    return result.Message;

                // No luck yet - continue the loop
            }

            throw new Exception(string.Format(&#34;Method ran {0} times but did not return successful response.&#34;, RetryMax));
        }
&lt;/pre&gt;

&lt;p&gt;Now how would you invoke this method?&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;var message = ExecuteWithRetry(MethodToRun, numberOfRetries);
&lt;/pre&gt;

&lt;p&gt;That&amp;#8217;s easy :)&lt;/p&gt;

&lt;p&gt;If you want to see the full implementation you can get it &lt;a href=&#34;http://sdrv.ms/18rLfuW&#34; target=&#34;_blank&#34;&gt;here!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please feel free to write a comment if you have any questions.&lt;/p&gt;

&lt;div style=&#34;font-size:0px;height:0px;line-height:0px;margin:0;padding:0;clear:both&#34;&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>