<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raspberry Pi on SystemOut</title>
    <link>http://systemout.net/tags/raspberry-pi/</link>
    <description>Recent content in Raspberry Pi on SystemOut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>nmj@systemout.net (Nicklas Møller Jepsen)</managingEditor>
    <webMaster>nmj@systemout.net (Nicklas Møller Jepsen)</webMaster>
    <lastBuildDate>Thu, 18 Dec 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://systemout.net/tags/raspberry-pi/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to build and deploy octopress with a single click, part 1</title>
      <link>http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p1</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p1</guid>
      <description>

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;
It is no longer required to use Ruby 1.9.3 with Octopress so the post has been updated accordingly.
Also, installation instructions for Python is added because this is required for the build process to work.&lt;/p&gt;

&lt;h2 id=&#34;introduction:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this guide I will guide you to how you can build and deploy your Octopress site with a single mouse click. That is; building Octopress on your Windows computer and deploying the generated site to your web server, for example a Raspberry Pi!
To accomplish this, we will be using Ruby, rake and WinSCP and deploying it using FTP.&lt;/p&gt;

&lt;p&gt;This blog, &lt;a href=&#34;http://systemout.net&#34; title=&#34;SystemOut.net&#34;&gt;Systemout.net&lt;/a&gt;, started out just being generated on the web server/the Pi, but the Pi is not exactly made for CPU intensive work and therefore I got a little tied of waiting for even the smallest changes made to the blog to be generated.
I&amp;rsquo;m sure you know this, but Octopress needs to regenerate the entire site, primarily to keep all links inbetween the various post valid, even if something is changed. This is the disadvantage of having a static site as your blog, BUT once the generation/build/deployment process is over, you can enjoy the benefits of a static blog: Speed, simplicity, etc.&lt;/p&gt;

&lt;h2 id=&#34;steps:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Steps&lt;/h2&gt;

&lt;p&gt;There are a few steps required before you can use your Windows box to build and host Octopress on it.
But don&amp;rsquo;t worry: If you follow this guide, it will be a peace of cake!
The steps required are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#ruby&#34;&gt;Install Ruby and the Ruby SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tortoise&#34;&gt;Install Tortoise Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#clone&#34;&gt;Clone Octopress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;generate&#34;&gt;Generate your Octopress site and preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deploy&#34;&gt;Deploy&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;installing-ruby-and-the-ruby-sdk-on-windows-a-name-ruby-a:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Installing Ruby and the Ruby SDK on Windows&lt;a name=&#34;ruby&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;You can find the various Ruby downloads &lt;a href=&#34;http://rubyinstaller.org/downloads/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.2.2.exe&#34;&gt;And here is a direct download link for Ruby 2.2.2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For Ruby version 2.2.2 we need the mingw64-32-4.7.2 of the Ruby SDK. This can be found &lt;a href=&#34;http://dl.bintray.com/oneclick/rubyinstaller/DevKit-mingw64-32-4.7.2-20130224-1151-sfx.exe&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We need to make some manual changes for the Ruby SDK to function properbly. Open a command prompt and cd to the location where you extracted the Ruby SDK, let&amp;rsquo;s say it is in C:\RubySdk and run the following 3 commands:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    C:\RubySdk&amp;gt;devkitvars.bat
    C:\RubySdk&amp;gt;ruby dk.rb init
    C:\RubySdk&amp;gt;ruby dk.rb install
&lt;/pre&gt;&lt;/div&gt;

Lastly we can test to see that the correct version of Ruby is installed by running:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	C:\&amp;gt;ruby --version
&lt;/pre&gt;&lt;/div&gt;

which should give us something like:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	ruby &lt;span style=&#34;color: #40a070&#34;&gt;1&lt;/span&gt;.&lt;span style=&#34;color: #40a070&#34;&gt;9&lt;/span&gt;.&lt;span style=&#34;color: #40a070&#34;&gt;3&lt;/span&gt;p&lt;span style=&#34;color: #40a070&#34;&gt;551&lt;/span&gt; (&lt;span style=&#34;color: #40a070&#34;&gt;2014-11-13&lt;/span&gt;) [i&lt;span style=&#34;color: #40a070&#34;&gt;386&lt;/span&gt;-mingw&lt;span style=&#34;color: #40a070&#34;&gt;32&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;

&amp;hellip;and that&amp;rsquo;s it for the Ruby installation!&lt;/p&gt;

&lt;h3 id=&#34;install-python:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Install Python&lt;/h3&gt;

&lt;p&gt;Pretty simple: Go to &lt;a href=&#34;https://www.python.org/downloads/windows/&#34;&gt;the official site&lt;/a&gt; to get the latest installer and install it.&lt;/p&gt;

&lt;h3 id=&#34;install-tortoise-git-a-name-tortoise-a:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Install Tortoise Git&lt;a name=&#34;tortoise&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This step is pretty straight forward; simply download and install the Tortoise Git client from &lt;a href=&#34;https://code.google.com/p/tortoisegit/wiki/Download&#34;&gt;here&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&#34;clone-octopress-a-name-clone-a:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Clone Octopress&lt;a name=&#34;clone&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Now we&amp;rsquo;re setup and ready the start with the fun stuf!&lt;/p&gt;

&lt;p&gt;Open a command prompt, cd to the directory where you want your Octopress cloned into and run:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;    git clone git://github.com/imathis/octopress.git octopress
&lt;/pre&gt;&lt;/div&gt;

Now cd to the octopress dir and install some gems:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;cd&lt;/span&gt; octopress
	gem install bundler
	bundle install
&lt;/pre&gt;&lt;/div&gt;

&lt;strong&gt;Note:&lt;/strong&gt; If you get an error like:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	Gem&lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;::RemoteFetcher::FetchError: SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B:certificate verify failed (https://rubygems.org/gems/listen-2.8.4.gem)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Then you need to change the URL of the rubygems location. This is done in the Gemfile. The Gemfile is located in the Octopress directory as you just cloned from Git and &lt;strong&gt;after&lt;/strong&gt; correction it should look like:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	source &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;http://rubygems.org&amp;quot;&lt;/span&gt;

	group &lt;span style=&#34;color: #517918&#34;&gt;:development&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;do&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;rake&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 10.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 2.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;octopress-hooks&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 2.2&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;octopress-date-format&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 2.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;jekyll-sitemap&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;rdiscount&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 2.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;RedCloth&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 4.2.9&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;haml&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 4.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;compass&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 0.12.2&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;sass-globbing&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 1.0.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;rubypants&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 0.2.0&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;rb-fsevent&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 0.9&amp;#39;&lt;/span&gt;
  		gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;stringex&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 1.4.0&amp;#39;&lt;/span&gt;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;end&lt;/span&gt;

	gem &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;#39;~&amp;gt; 1.4.2&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Save the Gemfile and rerun the command
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	bundle install
&lt;/pre&gt;&lt;/div&gt;

Finally we need to run this command:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	rake install
&lt;/pre&gt;&lt;/div&gt;

And that&amp;rsquo;s it - now Ruby is installed, Octopress is cloned and ready to be generated!&lt;/p&gt;

&lt;h3 id=&#34;generate-your-octopress-site-and-preview-a-name-generate-a:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Generate your Octopress site and preview&lt;a name=&#34;generate&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Now we need to build our Octopress site using the generate command:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	rake generate
&lt;/pre&gt;&lt;/div&gt;

This should take no time and now we can start a web server for previewing the generated site:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	rake preview
&lt;/pre&gt;&lt;/div&gt;

Now browse to &lt;a href=&#34;http://localhost:4000&#34;&gt;localhost:4000&lt;/a&gt; - and you should see you new Octopress site! :)&lt;/p&gt;

&lt;h3 id=&#34;deploying-to-you-web-server-a-name-deploy-a:e61c6f7a6cf6a4d41ee0bbdb9babe839&#34;&gt;Deploying to you web server&lt;a name=&#34;deploy&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;You could of course just keep you blog hosted on localhost:4000, but what&amp;rsquo;s the fun in that?
No where - therefore I&amp;rsquo;m going to show you how to deploy the generated blog to you Raspberry Pi or other web server using a little bit of command line magic combined with WinSCP and FTP. There are some steps involved in this so I wrote another blog post of how to do that. You can find the post &lt;a href=&#34;http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p2/&#34;&gt;right here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it! Feel free to leave any comments/ask questions in the comment fields below.&lt;/p&gt;

&lt;p&gt;Thanks for reading :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to build and deploy octopress with a single click, part 2 </title>
      <link>http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p2</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p2</guid>
      <description>

&lt;h2 id=&#34;introduction:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post is a continuation of the post about generating an Octopress site on a Windows machine and deploying it to a web server/Raspberry Pi.
You can find the post about setting up your Windows dev box to generate the Octopress site &lt;a href=&#34;http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p1/&#34;&gt;right here&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&#34;steps:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Steps&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#winscp&#34;&gt;Donwload and install WinSCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#ftp&#34;&gt;Enable FTP on the Raspberry Pi/web server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#winscpscript&#34;&gt;Create WinSCP script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#deploy&#34;&gt;Create build and deployment script&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#run&#34;&gt;Run!&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;download-and-install-winscp-a-name-winscp-a:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Download and install WinSCP&lt;a name=&#34;winscp&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;You can grab the latest version of WinSCP from &lt;a href=&#34;http://winscp.net/eng/download.php&#34;&gt;here&lt;/a&gt;.
Just follow the installation instructions and you are done!&lt;/p&gt;

&lt;h3 id=&#34;enable-ftp-on-the-raspberry-pi-web-server-a-name-ftp-a:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Enable FTP on the Raspberry Pi/web server&lt;a name=&#34;ftp&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;I use &lt;a href=&#34;http://www.proftpd.org/&#34;&gt;ProFTPD&lt;/a&gt; as my FTP server on the Raspberry Pi running Raspbian. On Raspbian/Debian it can be installed like this:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	apt-get install proftpd
&lt;/pre&gt;&lt;/div&gt;

Choose the standalone option when prompted.
After installation is completed, the FTP server should be running.
If you for some reason need to, you can stop/start the FTP server as follows:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	/etc/init.d/proftpd stop
	/etc/init.d/proftpd start
&lt;/pre&gt;&lt;/div&gt;

Now that&amp;rsquo;s up and running, we need to create a WinSCP script to upload the generated files.&lt;/p&gt;

&lt;h3 id=&#34;create-winscp-script-a-name-winscpscript-a:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Create WinSCP script&lt;a name=&#34;winscpscript&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Besides being a gui tool for file handling, WinSCP comes with a command line interface. Refer to the documentation &lt;a href=&#34;http://winscp.net/eng/docs/scriptcommand_synchronize&#34;&gt;here&lt;/a&gt; if you need further information.&lt;/p&gt;

&lt;p&gt;Create a new text file, name it winscpscript.scp and place it in octopress\scripts (create the scripts folder, if it doesn&amp;rsquo;t exist) and insert the following code:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	option batch abort
	option confirm &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;off&lt;/span&gt;
	open username:password@ipOrHostOfWebserver
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;cd&lt;/span&gt; /srv/www/octopress
	lcd C:\octopress\public\
	synchronize remote -delete
	exit
&lt;/pre&gt;&lt;/div&gt;

In this script, the following happens:
The first 2 lines ensures that prompts are answered negativly and that confirmations are turned of.&lt;/p&gt;

&lt;p&gt;The open command connects to the FTP server using the provided username/password on the hostname or ip address of you web server.&lt;/p&gt;

&lt;p&gt;After that we change the remote directory (the directory on the server), using the cd command, to a suitable place to store our web site.&lt;/p&gt;

&lt;p&gt;Then we use the lcd command to change the local directory to the location on the Windows computer where Octopress is installed/generated. Remember that the output of the generation is in the &amp;lsquo;public&amp;rsquo; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now the magic!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using the syncrhonize command we can sync the files in the local directory with the remote directory. The remote option tells WinSCP that it is the remote directory that shall be updated with changes from the local directory. By adding the -delete option, we tell WinSCP that the synchronization should make sure that locally deleted files also gets deleted from the remote directory.&lt;/p&gt;

&lt;p&gt;Lastly we simply exit the WinSCP CLI and returning control to the caller.&lt;/p&gt;

&lt;h3 id=&#34;create-build-and-deployment-script-a-name-deploy-a:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Create build and deployment script&lt;a name=&#34;deploy&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Now we can create the build script that will enable us to build/generate and publish our Octopress site with one single click.&lt;/p&gt;

&lt;p&gt;Create new text file, name it BuildOctopress.bat and save it in octopress\scripts with the following content:
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;C:\octopress\&amp;quot;&lt;/span&gt;
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;call&lt;/span&gt; rake generate || true
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;C:\Program Files (x86)\WinSCP\&amp;quot;&lt;/span&gt;
	winscp /script=C:\octopress\scripts\winscpscript.scp
&lt;/pre&gt;&lt;/div&gt;

Now here is what happens in the script:&lt;/p&gt;

&lt;p&gt;First we change working directory to the location of out octopress site.&lt;/p&gt;

&lt;p&gt;Then we generate the site using rake generate. The call function is handy, because we&amp;rsquo;re calling another batch job.&lt;/p&gt;

&lt;p&gt;Now cd to the WinSCP directory.&lt;/p&gt;

&lt;p&gt;Run WinSCP and pass the script we created in the previous step.&lt;/p&gt;

&lt;p&gt;Save the file and continue to the next step.&lt;/p&gt;

&lt;h3 id=&#34;run-a-name-run-a:3560ed7cf74d4df07c025fe02915a1b2&#34;&gt;Run&lt;a name=&#34;run&#34;&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;After all the above is done, we are now able to build and deploy out Octopress site by the single click of a mouse. Simply run the BuildOctopress.bat file and wait for it to finish.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it. Please feel free to leave any comments and/or questions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How To Setup Octopress for Jekyll on a Raspberry Pi</title>
      <link>http://systemout.net/2014/07/20/how-to-setup-octopress-for-jekyll-on-a-raspberry-pi/</link>
      <pubDate>Sun, 20 Jul 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2014/07/20/how-to-setup-octopress-for-jekyll-on-a-raspberry-pi/</guid>
      <description>

&lt;h3 id=&#34;introduction:68e5c07e240ab8ba63c1b33cbb305bb3&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;There are several things we need to take care of to make a successful installation of Octopress on the Pi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Prepare the Raspbian for web hosting&lt;/li&gt;
&lt;li&gt;Install NGINX&lt;/li&gt;
&lt;li&gt;Install Git&lt;/li&gt;
&lt;li&gt;Install Curl&lt;/li&gt;
&lt;li&gt;Install RVM (Ruby Version Manager) and Ruby&lt;/li&gt;
&lt;li&gt;Finally install Octopress&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But don&amp;rsquo;t worry - all of the above is quite straight forward, although the Ruby installation might take some time.&lt;/p&gt;

&lt;h4 id=&#34;preparing-raspbian:68e5c07e240ab8ba63c1b33cbb305bb3&#34;&gt;Preparing Raspbian&lt;/h4&gt;

&lt;p&gt;First of you need a running Raspbian installation. The easiest way to get this, is by downloading it from &lt;a href=&#34;http://www.raspberrypi.org/downloads/&#34;&gt;http://www.raspberrypi.org/downloads/&lt;/a&gt;.
Follow the official instructions to get up and running.&lt;/p&gt;

&lt;p&gt;This tutorial will use the terminal/SSH from a remote computer and therefore we need to make sure we can reach it over the network.
To find the Pi&amp;rsquo;s current IP write this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ifconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my case I got a eth0 inet addr:192.168.X.YYY
When using the Pi as a web server it is a good idea to give it a static IP address. I have an DHCP server where this is handled, but if you want to set up a static IP on the Pi, here is how it is done: &lt;a href=&#34;https://wiki.debian.org/NetworkConfiguration#Configuring_the_interface_manually&#34;&gt;https://wiki.debian.org/NetworkConfiguration#Configuring_the_interface_manually&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can disconnect the screen and go back to our main desktop. I use Windows and therefore Putty (&lt;a href=&#34;http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe&#34;&gt;http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe&lt;/a&gt;) to connect to Pi.&lt;/p&gt;

&lt;p&gt;I also like to give my computers a decent name (Raspbian sets the hostname to raspberrypi).
To change the hostname do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo namo /etc/hostname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Change the name to whatever you like and hit Ctrl+X, answer Y and the Enter to overwrite the file.
Now we need to update the hosts file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nano /etc/hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Replace raspberrypi with the new hostname you provided in the previous step and hit Ctrl+X, answer Y and the Enter to overwrite the file.
Reboot the Pi:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For further info on changing the hostname of see: &lt;a href=&#34;https://wiki.debian.org/HowTo/ChangeHostname&#34;&gt;https://wiki.debian.org/HowTo/ChangeHostname&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that Raspbian is installed and we have access to the Pi from SSH/Putty we need to make sure it is up to date by first collecting available updates and then upgrade/install them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install update
sudo apt-get install upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;install-nginx-curl-git-and-ruby:68e5c07e240ab8ba63c1b33cbb305bb3&#34;&gt;Install NGINX, Curl, Git and Ruby&lt;/h3&gt;

&lt;p&gt;First things first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install nginx git curl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With my Raspbian install I actually only needed to install NGINX, but just run the above to be sure to have what wee need, no damage done.&lt;/p&gt;

&lt;p&gt;No RVM and Ruby:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\curl -L https://get.rvm.io | bash -s stable --ruby
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;to get the latest stable RVM.
This process takes some time, on my Pi it took about &lt;strong&gt;1 and  a half hour&lt;/strong&gt;, so go watch some Simpsons. :)&lt;/p&gt;

&lt;p&gt;To start using RVM you need to run the command the installer tells you to or simply reconnect to the terminal.&lt;/p&gt;

&lt;p&gt;According to the Octopress docs, &lt;a href=&#34;http://octopress.org/docs/setup/rvm/&#34;&gt;http://octopress.org/docs/setup/rvm/&lt;/a&gt;, we need Ruby version 1.9.3.
Therefore we do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm install 1.9.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command also took an hour or so on my Pi, but the rest should be easyly done.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rvm use 1.9.3
rvm rubygems latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now check the the correct Ruby version is used:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ruby --version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should display 1.9.3-something.&lt;/p&gt;

&lt;h3 id=&#34;installing-octopress:68e5c07e240ab8ba63c1b33cbb305bb3&#34;&gt;Installing Octopress&lt;/h3&gt;

&lt;p&gt;To install Octopress from Git run the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://github.com/imathis/octopress.git octopress
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;hellip;where the last option &amp;lsquo;octopress&amp;rsquo; is the name of the site/directory for your Octopress installation. I name mine according to the site I&amp;rsquo;m going to host.&lt;/p&gt;

&lt;p&gt;Now we need to install Octopress&amp;rsquo; dependencies.
Browse to the name of the directory which you specified in the git command, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd octopress
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install bundler
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and lastly&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install the default Octopress theme:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rake install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;setting-up-nginx:68e5c07e240ab8ba63c1b33cbb305bb3&#34;&gt;Setting up NGINX&lt;/h3&gt;

&lt;p&gt;NGINX has a folder where it stores configuration for different sites.
We use nano to create a new configuration file for our site:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo nano /etc/nginx/sites-available/DOMAIN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then copy the following into the new file, remeber to change IPOFTHEPI and DOMAIN with your values. Also, if you gave another name for your Octopress installation in previeus steps, change the path in the location accordingly:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
    listen IPOFTHEPI:80;
    server_name DOMAIN;

        location / {
            root /home/pi/octopress/public;
            index index.html index.htm;
            access_log /home/pi/octopress/source/YOURDOMAIN.access.log;
            error_log /home/pi/octopress/source/YOURDOMAIN.error.log;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the new file.&lt;/p&gt;

&lt;p&gt;Create a link from the created file to the NGINX enabled sites directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /etc/nginx/sites-enabled
ln -s /etc/nginx/sites-available/DOMAIN /etc/nginx/sites-enabled/DOMAIN
ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart NGINX:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/init.d/nginx restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;Now all theres left to be done, is setting up your blog/site by following the guidelines on the official Octopress web site: &lt;a href=&#34;http://octopress.org/&#34;&gt;http://octopress.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to ease the generation and deployment process, you can build the blog on your windows machine and deploy it to the Raspberry Pi in a single click. Learn how to set this up by reading my guide here: &lt;a href=&#34;http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p1/&#34;&gt;http://systemout.net/2014/12/18/how-to-build-and-deploy-octopress-with-a-single-click-p1/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&#39;Moving on – WordPress to Octopress/Jekyll on a Pi&#39;</title>
      <link>http://systemout.net/2014/05/02/moving-on-wordpress-to-octopress-slash-jekyll-on-a-pi/</link>
      <pubDate>Fri, 02 May 2014 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2014/05/02/moving-on-wordpress-to-octopress-slash-jekyll-on-a-pi/</guid>
      <description>

&lt;p&gt;This 1 post is part of a series of posts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Summary (this post)&lt;/li&gt;
&lt;li&gt;The Pi: &lt;a href=&#34;http://systemout.net/2014/07/20/how-to-setup-octopress-for-jekyll-on-a-raspberry-pi/&#34;&gt;http://systemout.net/2014/07/20/how-to-setup-octopress-for-jekyll-on-a-raspberry-pi/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Blog&lt;/li&gt;
&lt;li&gt;The Rest (including the network)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;introduction:5242ebc0f1909014c89a5f31ee286dd7&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;The look ’n feel of the blog has changed, as you may have noticed.
The reason for this is simple; slow performance, increasing cost to hosting and pure curiosity, got me into migrating the existing WordPress solution into a static Octopress on Jekyll solution. Oh, and the new solution is hosted on a Raspberry Pi, &lt;a href=&#34;http://swag.raspberrypi.org/collections/frontpage/products/raspberry-pi-model-b&#34; target=&#34;_blank&#34;&gt;model B&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The result is amazing – the average response time is down around 400 MS after little over a week on the pie. Before it was about 1,5-2 secs.
In this post I’ll explain how the migration is done and which challenges I faced. I will not go into details, but I will provide you with the links to some great articles I used along the way.&lt;/p&gt;

&lt;h3 id=&#34;summary:5242ebc0f1909014c89a5f31ee286dd7&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;First a brief summary of the steps required.
The Pi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install Raspbian&lt;/li&gt;
&lt;li&gt;Setup static IP&lt;/li&gt;
&lt;li&gt;Install NGINX&lt;/li&gt;
&lt;li&gt;Install RVM&lt;/li&gt;
&lt;li&gt;Install Ruby&lt;/li&gt;
&lt;li&gt;Install Octopress&lt;/li&gt;
&lt;li&gt;Configuration of NGINX/Octopress&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download existing post, comments, pages, etc&lt;/li&gt;
&lt;li&gt;Convert to Octopress/Jekyll format&lt;/li&gt;
&lt;li&gt;Upload to Pi&lt;/li&gt;
&lt;li&gt;Build the new Blog&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Network:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DNS&lt;/li&gt;
&lt;li&gt;NAT on home network&lt;/li&gt;
&lt;li&gt;Limit torrents!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next post, I will dig into the details in configuring the Pi, and that post is available right here: &lt;a href=&#34;http://systemout.net/2014/07/20/how-to-setup-octopress-for-jekyll-on-a-raspberry-pi/&#34;&gt;http://systemout.net/2014/07/20/how-to-setup-octopress-for-jekyll-on-a-raspberry-pi/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>