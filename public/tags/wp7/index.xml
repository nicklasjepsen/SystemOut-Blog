<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wp7 on SystemOut</title>
    <link>http://systemout.net/tags/wp7/</link>
    <description>Recent content in Wp7 on SystemOut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>nmj@systemout.net (Nicklas Møller Jepsen)</managingEditor>
    <webMaster>nmj@systemout.net (Nicklas Møller Jepsen)</webMaster>
    <lastBuildDate>Thu, 09 Feb 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://systemout.net/tags/wp7/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>&#39;Windows Azure Access Control Service (ACS) &amp;#8211; part 1 &amp;#8216;Get token in WP7 client&amp;#8217;&#39;</title>
      <link>http://systemout.net/2012/02/09/windows-azure-access-control-service-acs-part-1-get-token-in-wp7-client/</link>
      <pubDate>Thu, 09 Feb 2012 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2012/02/09/windows-azure-access-control-service-acs-part-1-get-token-in-wp7-client/</guid>
      <description>&lt;p&gt;While working on a project for WP7 where a backend is required I needed to implement some sort of security on the server. As the server is being hosted in Windows Azure I looked into ACS. At first it did look a bid &amp;#8220;over configured&amp;#8221; meaning there is a lot of documentation on how to use it and what you can actually do with it. Facebook, Google, Windows Live login etc. For my purpose I just needed a simple way off securing my REST service and after some reading I thought I would give ACS a try.&lt;/p&gt;

&lt;p&gt;Steps involved:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a REST ACS enabled WCF service (will post about this subject later)&lt;/li&gt;
&lt;li&gt;Configure ACS (Windows Azure Portal)&lt;/li&gt;
&lt;li&gt;Request token on client (this post ;))&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  This first post about ACS is about the last step in the above list. The reason for not starting from the top is that I couldn&amp;#8217;t seem to find any decent guides on how to implement a &lt;span style=&#34;text-decoration: underline;&#34;&gt;simple&lt;/span&gt; ACS client/consumer on Windows Phone. Therefore the bottom up concept :)
&lt;/div&gt;

&lt;p&gt;To actually configure ACS to Issue a SWT Token to be using I followed &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/hh289317.aspx&#34; target=&#34;_blank&#34;&gt;this well explained MSDN article&lt;/a&gt; - scroll to the 2. part &amp;#8216;Step 2 – Configure ACS to Issue a SWT Token&amp;#8217;&lt;/p&gt;

&lt;p&gt;Btw. in the examples below I&amp;#8217;m using &lt;a href=&#34;http://restsharp.org/&#34; target=&#34;_blank&#34;&gt;RestSharp&lt;/a&gt; a very simple to use REST library for both WP7/SL, WinForms, etc.&lt;/p&gt;

&lt;p&gt;And now back to the topic &amp;#8211; WP7 ACS token consumer:&lt;/p&gt;

&lt;p&gt;The basic concept of authorizing against a WCF ACS secured service is that you send an &amp;#8220;Authorization&amp;#8221; header in the request:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;request.AddHeader(&#34;Authorization&#34;, token.TokenString);&lt;/pre&gt;

&lt;p&gt;But of course you need to now the token to put in the header.&lt;/p&gt;

&lt;p&gt;To make sure we have the token, the following is executed before the actual REST call:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;RestClient client = new RestClient(
string.Format(&#34;https://{0}.{1}&#34;, serviceNamespace, accesscontrol.windows.net));
RestRequest treq = new RestRequest(&#34;/WRAPv0.9&#34;);
treq.Method = Method.POST;
treq.AddParameter(&#34;wrap_name&#34;, uid);
treq.AddParameter(&#34;wrap_password&#34;, pwd);
treq.AddParameter(&#34;wrap_scope&#34;, realm);
client.ExecuteAsync(treq, (re) =&amp;amp;gt;
{
// Get expiration
string expiry = result
.Split(&#39;&amp;amp;amp;&#39;)
.Single(value =&amp;amp;gt; value.StartsWith(&#34;wrap_access_token_expires_in&#34;, StringComparison.OrdinalIgnoreCase)).
Split(&#39;=&#39;)[1];

// Get Access Token
result = HttpUtility.UrlDecode(
result
.Split(&#39;&amp;amp;amp;&#39;)
.Single(value =&amp;amp;gt; value.StartsWith(&#34;wrap_access_token=&#34;, StringComparison.OrdinalIgnoreCase))
.Split(&#39;=&#39;)[1]);

token = new AcsToken()
{
ExpirationDate = DateTime.Now.AddSeconds(Int32.Parse(expiry)),
TokenString = string.Format(&#34;WRAP access_token=&#34;{0}&#34;&#34;, result),
};
});
&lt;/pre&gt;

&lt;p&gt;Now the token is stored in a local variable &amp;#8216;token&amp;#8217; where it is possible to check if it is expired and to get the token string which the can be used to put in the header of coming requests against the ACS secured WCF REST service.&lt;/p&gt;

&lt;p&gt;And just for as a ending note; here&amp;#8217;s the Token type:&lt;/p&gt;

&lt;pre class=&#34;brush: csharp; title: ; notranslate&#34; title=&#34;&#34;&gt;class AcsToken
{
public string TokenString { get; set; }
public DateTime ExpirationDate { get; set; }

public bool IsExpired
{
get
{
return DateTime.Now &amp;amp;gt; ExpirationDate;
}
}
}
&lt;/pre&gt;

&lt;p&gt;That&amp;#8217;s it for this part of the ACS post series. More will follow :)&lt;/p&gt;

&lt;div style=&#34;font-size:0px;height:0px;line-height:0px;margin:0;padding:0;clear:both&#34;&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Windows Phone RSS Reader</title>
      <link>http://systemout.net/2011/12/10/windows-phone-rss-reader/</link>
      <pubDate>Sat, 10 Dec 2011 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2011/12/10/windows-phone-rss-reader/</guid>
      <description>

&lt;p&gt;As part of a competition to win a Windows Phone I have created 3 WP7 apps. One of these is a RSS reader made specific for the danish it news site &lt;a title=&#34;Version2&#34; href=&#34;http://www.version2.dk&#34; target=&#34;_blank&#34;&gt;Version2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The source for this application can be found on&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://version2viewer.codeplex.com/&#34; target=&#34;_blank&#34;&gt;Codeplex&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The app is based on the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ff941098(v=vs.92).aspx&#34; target=&#34;_blank&#34;&gt;Pivot control&lt;/a&gt; in WP7. In short this means that you have a page with a list of feed items. On the same page there is a &amp;#8216;tab&amp;#8217; to another page where another feed&amp;#8217;s items are visible:&lt;/p&gt;

&lt;p style=&#34;text-align:center;&#34;&gt;
  &lt;a href=&#34;http://systemout.net/wp-content/uploads/2011/12/v2-screen1.png&#34;&gt;&lt;img class=&#34; wp-image-53 aligncenter&#34; title=&#34;V2-screen1&#34; src=&#34;http://systemout.net/wp-content/uploads/2011/12/v2-screen1.png&#34; alt=&#34;&#34; width=&#34;241&#34; height=&#34;438&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2 id=&#34;the-view:feba98f87e7da1dc9b77288a18b111e7&#34;&gt;The View&lt;/h2&gt;

&lt;p&gt;The view is XAML code and is implemented using the &lt;a href=&#34;http://en.wikipedia.org/wiki/Model_View_ViewModel&#34; target=&#34;_blank&#34;&gt;MVVM&lt;/a&gt; pattern. This pattern is extremely powerful when it comes to binding data to the view. Furthermore DataTemplates are used to reuse the layout of the feed items.&lt;/p&gt;

&lt;p&gt;Here is an example of a DataTemplate:&lt;/p&gt;

&lt;pre class=&#34;brush: xml; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;DataTemplate x:Name=&#34;FeedItemTemplate&#34;&amp;gt;
         &amp;lt;StackPanel Orientation=&#34;Vertical&#34;&amp;gt;
             &amp;lt;TextBlock Text=&#34;{Binding TruncatedTitle}&#34; 
                        TextWrapping=&#34;Wrap&#34; 
                        Margin=&#34;12,0,0,0&#34; 
                        Style=&#34;{StaticResource PhoneTextTitle3Style}&#34;/&amp;gt;
             &amp;lt;StackPanel Orientation=&#34;Horizontal&#34; 
                         Margin=&#34;0,0,0,17&#34;&amp;gt;
                 &amp;lt;TextBlock Text=&#34;{Binding TimeStamp}&#34; 
                            Foreground=&#34;#B0D011&#34; 
                            Margin=&#34;12,-6,0,0&#34; 
                            Style=&#34;{StaticResource PhoneTextSubtleStyle}&#34; /&amp;gt;
                 &amp;lt;TextBlock Text=&#34;{Binding Url}&#34;  
                            TextWrapping=&#34;NoWrap&#34; 
                            Margin=&#34;12,-6,0,0&#34; 
                            Style=&#34;{StaticResource PhoneTextSubtleStyle}&#34;/&amp;gt;
             &amp;lt;/StackPanel&amp;gt;
         &amp;lt;/StackPanel&amp;gt;
&amp;lt;/DataTemplate&amp;gt;
&lt;/pre&gt;

&lt;p&gt;This DataTemplate is then used in the ListBox ItemTemplate by using the FeedItemTemplate name:&lt;/p&gt;

&lt;pre class=&#34;brush: xml; title: ; notranslate&#34; title=&#34;&#34;&gt;&amp;lt;ListBox x:Name=&#34;NewsLbx&#34;
         Margin=&#34;0,0,-12,0&#34;
         ItemTemplate=&#34;{StaticResource FeedItemTemplate}&#34;
         ItemsSource=&#34;{Binding NewsItems}&#34;
         Tap=&#34;NewsLbx_Tap&#34;/&amp;gt;
&lt;/pre&gt;

&lt;p&gt;This is more or less the only thing required for the view to work. Remember the complete source is available at Codeplex, link at the top of this post.&lt;/p&gt;

&lt;h2 id=&#34;the-viewmodel:feba98f87e7da1dc9b77288a18b111e7&#34;&gt;The ViewModel&lt;/h2&gt;

&lt;p&gt;Now if you&amp;#8217;re wondering where the view is actually getting it&amp;#8217;s data from, then read on!&lt;/p&gt;

&lt;p&gt;In the project there is class, MainViewModel, this class is responsible of holding the data that the view uses and in this class has the ObservableCollections that contains the data.&lt;/p&gt;

&lt;p&gt;The view is bound to the data in the App.xaml.cs:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	
		&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; MainViewModel viewModel = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;null&lt;/span&gt;;

        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;static&lt;/span&gt; MainViewModel ViewModel
        {
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;get&lt;/span&gt;
            {
                &lt;span style=&#34;color: #60a0b0; font-style: italic&#34;&gt;// Delay creation of the view model until necessary&lt;/span&gt;
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (viewModel == &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;null&lt;/span&gt;)
                    viewModel = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; MainViewModel();

                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; viewModel;
            }
        }
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The ItemViewModel is pretty straight forward; the class is implementing the INotifyPropertyChanged which makes the View auto updated when the data in the model is changed. To implement this the following is done:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	
	&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #0e84b5; font-weight: bold&#34;&gt;FeedItemViewModel&lt;/span&gt; : INotifyPropertyChanged
	{
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; title;
        &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #902000&#34;&gt;string&lt;/span&gt; Title
        {
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;return&lt;/span&gt; title; }
            &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;set&lt;/span&gt;
            {
                &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;value&lt;/span&gt; != title)
                {
                    title = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;value&lt;/span&gt;;
                    NotifyPropertyChanged(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;Title&amp;quot;&lt;/span&gt;);
                }
            }
        }

        ...
	}
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The most noticeable thing in the above is the call to NotifyPropertyChanged(&amp;#8220;Title&amp;#8221;) &amp;#8211; this is to make the the view aware that a property has changed.&lt;/p&gt;

&lt;h2 id=&#34;the-rss-consumer:feba98f87e7da1dc9b77288a18b111e7&#34;&gt;The RSS Consumer&lt;/h2&gt;

&lt;p&gt;To retrieve the  RSS data a WebClient is used:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	
	WebClient web = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; WebClient();
    web.DownloadStringCompleted += &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; DownloadStringCompletedEventHandler(WebClient_DownloadStringCompleted);
    web.DownloadStringAsync(uri);
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;When the download is completed the following are executed:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f0f0&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;	
	StringReader sr = &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; StringReader(e.Result);
    &lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; reader = XmlReader.Create(sr);
    &lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; document = XDocument.Load(reader);

    &lt;span style=&#34;color: #902000&#34;&gt;var&lt;/span&gt; entries =
                 &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;from&lt;/span&gt; entry &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;in&lt;/span&gt; document.Descendants(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;channel&amp;quot;&lt;/span&gt;).Descendants(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;)
                 let title = entry.Element(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;).Value
                 let link = entry.Element(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;comments&amp;quot;&lt;/span&gt;).Value
                 let pubDate = entry.Element(&lt;span style=&#34;color: #4070a0&#34;&gt;&amp;quot;pubDate&amp;quot;&lt;/span&gt;).Value
                 &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color: #007020; font-weight: bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #06287e&#34;&gt;FeedItemViewModel&lt;/span&gt;()
                 {
                     Title = title,
                     Url = link,
                     PubDate = DateTime.Parse(pubDate)
                 };
    feedHandler(entries.ToArray());
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;By using LINQ the response from the RSS feed is handled and parsed into the FeedItemViewModel. This could probably be made a hole lot prettier, but hey; it&amp;#8217;s open source and yours to edit on Codeplex.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s pretty much it!&lt;/p&gt;

&lt;p&gt;If you have any comments/suggestions/questions, then please contact me :)&lt;/p&gt;

&lt;div style=&#34;font-size:0px;height:0px;line-height:0px;margin:0;padding:0;clear:both&#34;&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>WP7 Sms Templates</title>
      <link>http://systemout.net/2011/12/07/wp7-sms-templates/</link>
      <pubDate>Wed, 07 Dec 2011 00:00:00 +0000</pubDate>
      <author>nmj@systemout.net (Nicklas Møller Jepsen)</author>
      <guid>http://systemout.net/2011/12/07/wp7-sms-templates/</guid>
      <description>&lt;p&gt;&lt;p&gt;&lt;a href=&#34;http://systemout.net/wp-content/uploads/2011/12/icon-master.png&#34;&gt;&lt;img class=&#34;wp-image-24 alignleft&#34; title=&#34;Icon Master&#34; src=&#34;http://systemout.net/wp-content/uploads/2011/12/icon-master.png?w=300&#34; alt=&#34;&#34; width=&#34;150&#34; height=&#34;150&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&#34;padding-left:60px;&#34;&gt;Today I just finished my first (well actually second, but the first didn&amp;#8217;t really count) App for Windows Phone.&lt;/p&gt;
&lt;p&gt;The App is a simple App providing the user with an easy way of sending standard text messages.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s pretty basic, but to be able to &amp;#8220;win&amp;#8221; a WP I need to create 3 Apps in no time :) &lt;/p&gt;
&lt;p&gt;Here are some screens:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://systemout.net/wp-content/uploads/2011/12/wp71.png&#34;&gt;
        &lt;style type=&#39;text/css&#39;&gt;
            #gallery-1 {
                margin: auto;
            }
            #gallery-1 .gallery-item {
                float: left;
                margin-top: 10px;
                text-align: center;
                width: 50%;
            }
            #gallery-1 img {
                border: 2px solid #cfcfcf;
            }
            #gallery-1 .gallery-caption {
                margin-left: 0;
            }
            /* see gallery_shortcode() in wp-includes/media.php */
        &lt;/style&gt;
        &lt;div id=&#39;gallery-1&#39; class=&#39;gallery galleryid-16 gallery-columns-2 gallery-size-thumbnail&#39;&gt;&lt;dl class=&#39;gallery-item&#39;&gt;
            &lt;dt class=&#39;gallery-icon landscape&#39;&gt;
                &lt;a href=&#39;http://www.systemout.net/blog/2011/12/07/wp7-sms-templates/icon-master/&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;http://www.systemout.net/wp-content/uploads/2011/12/icon-master-150x150.png&#34; class=&#34;attachment-thumbnail&#34; alt=&#34;Icon Master&#34; /&gt;&lt;/a&gt;
            &lt;/dt&gt;&lt;/dl&gt;&lt;dl class=&#39;gallery-item&#39;&gt;
            &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
                &lt;a href=&#39;http://www.systemout.net/blog/2011/12/07/wp7-sms-templates/wp72/&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;http://www.systemout.net/wp-content/uploads/2011/12/wp72-150x150.png&#34; class=&#34;attachment-thumbnail&#34; alt=&#34;WP7App2&#34; /&gt;&lt;/a&gt;
            &lt;/dt&gt;&lt;/dl&gt;&lt;br style=&#34;clear: both&#34; /&gt;&lt;dl class=&#39;gallery-item&#39;&gt;
            &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
                &lt;a href=&#39;http://www.systemout.net/blog/2011/12/07/wp7-sms-templates/wp71/&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;http://www.systemout.net/wp-content/uploads/2011/12/wp71-150x150.png&#34; class=&#34;attachment-thumbnail&#34; alt=&#34;WP7 App1&#34; /&gt;&lt;/a&gt;
            &lt;/dt&gt;&lt;/dl&gt;
            &lt;br style=&#39;clear: both;&#39; /&gt;
        &lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now I&amp;#8217;m justing waiting to get my token to the free Windows Phone App Hub to publish the App :) &lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div style=&#34;font-size:0px;height:0px;line-height:0px;margin:0;padding:0;clear:both&#34;&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>